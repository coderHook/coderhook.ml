<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Datascience on coderHook</title>
    <link>https://coderhook-ml.firebaseapp.com/tags/datascience/</link>
    <description>Recent content in Datascience on coderHook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 coderHook</copyright>
    <lastBuildDate>Thu, 27 Jul 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/datascience/" rel="self" type="application/rss+xml" />
    
    <item>
      <title> Using Descriptive Statitics with Python and Pandas. </title>
      <link>https://coderhook-ml.firebaseapp.com/project/descriptive_statistics/</link>
      <pubDate>Thu, 27 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coderhook-ml.firebaseapp.com/project/descriptive_statistics/</guid>
      <description>

&lt;h1 id=&#34;using-descriptive-statitics-with-python-and-pandas&#34;&gt;Using Descriptive Statitics with Python and Pandas.&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;In this notebook we are going to calculate the mean, Variance and standard deviation, CoVariance and Correlation and we are going to see it through some data visualizations to understand more in deep what we are doing.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%matplotlib inline

import matplotlib.pyplot as plt
import pandas as pd
movie_reviews = pd.read_csv(&amp;quot;https://raw.githubusercontent.com/fivethirtyeight/data/master/fandango/fandango_score_comparison.csv&amp;quot;)

scores = [&amp;quot;RT_user_norm&amp;quot;, &amp;quot;Metacritic_user_nom&amp;quot;, &amp;quot;Fandango_Ratingvalue&amp;quot;, &amp;quot;IMDB_norm&amp;quot;]

fig = plt.figure(figsize=(5, 12))
for i, sc in enumerate(scores):
    fig.add_subplot(4, 1, i+1)
    ax = movie_reviews[sc].plot(kind=&#39;hist&#39;)
    ax.set_xlim([0, 5])
    ax.set_ylabel(&#39;&#39;)
    ax.set_title(sc)
    ax.grid()

plt.show()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://coderhook-ml.firebaseapp.com/img/ds/descriptive_statistics/output_1_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;mean&#34;&gt;Mean&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;let&amp;rsquo;s calculate some statistical measures to see how the properties the histograms suggested are reflected in numerical values.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def calc_mean(data):
    mean = data.mean()
    return mean

sel_cols = [&#39;RT_user_norm&#39;, &#39;Metacritic_user_nom&#39;, &#39;Fandango_Ratingvalue&#39;, &#39;IMDB_norm&#39;]

user_review = movie_reviews[sel_cols]

rt_mean, mc_mean, fg_mean, id_mean = user_review.apply(calc_mean)

print(rt_mean)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3.19383561644
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(mc_mean)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3.2595890411
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(fg_mean, id_mean)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3.84520547945 3.36849315068
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;variance-and-standard-deviation&#34;&gt;Variance And Standard Deviation&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;It seems like the Fandango user reviews have the highest mean and skew the most towards to the higher end compared to the other review sites. Let&amp;rsquo;s now calculate variance and standard deviation to better understand the spreads.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
def calc_mean(series):
    vals = series.values
    mean = sum(vals) / len(vals)
    return mean

def calc_variance(series):
    mean = calc_mean(series)
    variance = [ (x - mean) **2 for x in series]
    variance = sum(variance) / len(variance)
    return variance

def calc_stdev(series):
    variance = calc_variance(series)
    return variance ** (1/2)

rt_var, mc_var, fg_var, id_var = user_review.apply(calc_variance)
rt_stdev, mc_stdev, fg_stdev, id_stdev = user_review.apply(calc_stdev)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(rt_var, mc_var, fg_var, id_var)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0.995578438731 0.566654625633 0.251107149559 0.228219647213
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(rt_stdev, mc_stdev, fg_stdev, id_stdev)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0.997786770173 0.752764654878 0.501105926486 0.47772340032
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;scatter-plots&#34;&gt;Scatter Plots&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Let&amp;rsquo;s now explore if Fandango&amp;rsquo;s user ratings are at least relatively correct. More precisely, are movies that are highly rated on Rotten Tomatoes, IMDB, and Metacritic also highly rated on Fandango?&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
fig = plt.figure(figsize = (4, 8))
scores = [&amp;quot;RT_user_norm&amp;quot;, &amp;quot;Metacritic_user_nom&amp;quot;, &amp;quot;IMDB_norm&amp;quot;, &amp;quot;Fandango_Ratingvalue&amp;quot;]
for i in range(0,3):
    fig.add_subplot(3, 1, i+1)
    ax = plt.scatter(movie_reviews[scores[i]], movie_reviews[scores[3]])    
    plt.xlim(0.0, 5.0)

plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://coderhook-ml.firebaseapp.com/img/ds/descriptive_statistics/output_13_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;covariance&#34;&gt;COVariance&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It seems like Rotten Tomatoes and IMDB user reviews correlate the most with Fandango user reviews while Metacritic only weakly correlates.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Let&amp;rsquo;s write a function that to calculates the covariance values in this screen and a function to calculate the correlation values in the next screen.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;rsquo;s the formula for computing the covariance between 2 variables: cov(x,y)=∑(xi−x¯)(yi−y¯)/n.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def calc_covariance(x, y):
    x_mean = calc_mean(x)
    y_mean = calc_mean(y)

    x_diff = [nx - x_mean for nx in x]
    y_diff = [ny - y_mean for ny in y]

    xy_mult = [ (x_diff[i] * y_diff[i]) for i in range(0,len(x_diff))]

    covariance = sum(xy_mult) / len(x)

    return covariance

scores = [&amp;quot;RT_user_norm&amp;quot;, &amp;quot;Metacritic_user_nom&amp;quot;, &amp;quot;IMDB_norm&amp;quot;, &amp;quot;Fandango_Ratingvalue&amp;quot;]

rt_fg_covar = calc_covariance(movie_reviews[scores[0]], movie_reviews[scores[3]])
mc_fg_covar = calc_covariance(movie_reviews[scores[1]], movie_reviews[scores[3]])
id_fg_covar = calc_covariance(movie_reviews[scores[2]], movie_reviews[scores[3]])

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(rt_fg_covar, mc_fg_covar, id_fg_covar)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0.362162225558 0.127100769375 0.143718802777
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;correlation&#34;&gt;Correlation&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Interestingly, Rotten Tomatoes covaries strongly with Fandango (0.36) compared to Metacritic (0.13) and IMDB (0.14).&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Let&amp;rsquo;s calculate the correlation values by using the calc_covariance a function from the previous step.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Here&amp;rsquo;s the full formula for correlation:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;cov(x,y)/σxσy.&lt;/p&gt;

&lt;p&gt;where cov is shorthand for the covariance function, and σ represents the standard deviation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def calc_correlation(x, y):
    covariance = calc_covariance(x, y)
    correlation = covariance / ((calc_variance(x) ** (1/2)) * (calc_variance(y) ** (1/2)))

    return correlation


rt_fg_corr = calc_correlation(movie_reviews[&amp;quot;RT_user_norm&amp;quot;], movie_reviews[&amp;quot;Fandango_Ratingvalue&amp;quot;])
mc_fg_corr = calc_correlation(movie_reviews[&amp;quot;Metacritic_user_nom&amp;quot;], movie_reviews[&amp;quot;Fandango_Ratingvalue&amp;quot;])
id_fg_corr = calc_correlation(movie_reviews[&amp;quot;IMDB_norm&amp;quot;], movie_reviews[&amp;quot;Fandango_Ratingvalue&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(rt_fg_corr, mc_fg_corr, id_fg_corr)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0.724328994249 0.336945314265 0.600354177263
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;As the scatter plots suggested, Rotten Tomatoes and IMDB correlate the strongest with Fandango, with correlation values of 0.72 and 0.60 respectively. Metacritic, on the other hand, only has a correlation value of 0.34 with Fandango.&lt;/li&gt;
&lt;li&gt;While covariance and correlation values may seem complicated to compute and hard to reason with, their best use case is in comparing relationships like we did in this challenge.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Exploring the tendencies in Celebrating Thanksgiving. </title>
      <link>https://coderhook-ml.firebaseapp.com/project/thanksgivingcelebrating/</link>
      <pubDate>Thu, 27 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coderhook-ml.firebaseapp.com/project/thanksgivingcelebrating/</guid>
      <description>

&lt;h1 id=&#34;exploring-the-tendencies-in-celebrating-thanksgiving&#34;&gt;Exploring the tendencies in Celebrating Thanksgiving.&lt;/h1&gt;

&lt;p&gt;### In this project we are going to explore the tendencies that people follow in this celebration.&lt;/p&gt;

&lt;p&gt;#### First, we are going to check what dishes and desserts are the favourites among people.
   #### Secondly, we are going to get the income and see how it is correlated from How far people travel to celebrate Thnksgiving.
   #### Finally, we are going to conclude our project Linking celebration and friends and observing what age range tends to celebrate most Thanksgiving.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;

import pandas as pd

dataset = pd.read_csv(&#39;https://raw.githubusercontent.com/fivethirtyeight/data/master/thanksgiving-2015/thanksgiving-2015-poll-data.csv&#39;, encoding=&#39;latin1&#39;)
dataset.head(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style&gt;
    .dataframe thead tr:only-child th {
        text-align: right;
    }

    .dataframe thead th {
        text-align: left;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;RespondentID&lt;/th&gt;
      &lt;th&gt;Do you celebrate Thanksgiving?&lt;/th&gt;
      &lt;th&gt;What is typically the main dish at your Thanksgiving dinner?&lt;/th&gt;
      &lt;th&gt;What is typically the main dish at your Thanksgiving dinner? - Other (please specify)&lt;/th&gt;
      &lt;th&gt;How is the main dish typically cooked?&lt;/th&gt;
      &lt;th&gt;How is the main dish typically cooked? - Other (please specify)&lt;/th&gt;
      &lt;th&gt;What kind of stuffing/dressing do you typically have?&lt;/th&gt;
      &lt;th&gt;What kind of stuffing/dressing do you typically have? - Other (please specify)&lt;/th&gt;
      &lt;th&gt;What type of cranberry saucedo you typically have?&lt;/th&gt;
      &lt;th&gt;What type of cranberry saucedo you typically have? - Other (please specify)&lt;/th&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;th&gt;Have you ever tried to meet up with hometown friends on Thanksgiving night?&lt;/th&gt;
      &lt;th&gt;Have you ever attended a &#34;Friendsgiving?&#34;&lt;/th&gt;
      &lt;th&gt;Will you shop any Black Friday sales on Thanksgiving Day?&lt;/th&gt;
      &lt;th&gt;Do you work in retail?&lt;/th&gt;
      &lt;th&gt;Will you employer make you work on Black Friday?&lt;/th&gt;
      &lt;th&gt;How would you describe where you live?&lt;/th&gt;
      &lt;th&gt;Age&lt;/th&gt;
      &lt;th&gt;What is your gender?&lt;/th&gt;
      &lt;th&gt;How much total combined money did all members of your HOUSEHOLD earn last year?&lt;/th&gt;
      &lt;th&gt;US Region&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;4337954960&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Turkey&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Baked&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Bread-based&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Suburban&lt;/td&gt;
      &lt;td&gt;18 - 29&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;$75,000 to $99,999&lt;/td&gt;
      &lt;td&gt;Middle Atlantic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;4337951949&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Turkey&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Baked&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Bread-based&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Other (please specify)&lt;/td&gt;
      &lt;td&gt;Homemade cranberry gelatin ring&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Rural&lt;/td&gt;
      &lt;td&gt;18 - 29&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;$50,000 to $74,999&lt;/td&gt;
      &lt;td&gt;East South Central&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;4337935621&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Turkey&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Roasted&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Rice-based&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Homemade&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Suburban&lt;/td&gt;
      &lt;td&gt;18 - 29&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;$0 to $9,999&lt;/td&gt;
      &lt;td&gt;Mountain&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;4337933040&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Turkey&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Baked&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Bread-based&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Homemade&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Urban&lt;/td&gt;
      &lt;td&gt;30 - 44&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;$200,000 and up&lt;/td&gt;
      &lt;td&gt;Pacific&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;4337931983&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Tofurkey&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Baked&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Bread-based&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Canned&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Urban&lt;/td&gt;
      &lt;td&gt;30 - 44&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;$100,000 to $124,999&lt;/td&gt;
      &lt;td&gt;Pacific&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;5 rows × 65 columns&lt;/p&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;header = dataset.columns.unique()

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cel_thanks_count = dataset[&amp;quot;Do you celebrate Thanksgiving?&amp;quot;].value_counts()
cel_thanks = dataset[dataset[&amp;quot;Do you celebrate Thanksgiving?&amp;quot;] == &#39;Yes&#39;]

cel_thanks.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style&gt;
    .dataframe thead tr:only-child th {
        text-align: right;
    }

    .dataframe thead th {
        text-align: left;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;RespondentID&lt;/th&gt;
      &lt;th&gt;Do you celebrate Thanksgiving?&lt;/th&gt;
      &lt;th&gt;What is typically the main dish at your Thanksgiving dinner?&lt;/th&gt;
      &lt;th&gt;What is typically the main dish at your Thanksgiving dinner? - Other (please specify)&lt;/th&gt;
      &lt;th&gt;How is the main dish typically cooked?&lt;/th&gt;
      &lt;th&gt;How is the main dish typically cooked? - Other (please specify)&lt;/th&gt;
      &lt;th&gt;What kind of stuffing/dressing do you typically have?&lt;/th&gt;
      &lt;th&gt;What kind of stuffing/dressing do you typically have? - Other (please specify)&lt;/th&gt;
      &lt;th&gt;What type of cranberry saucedo you typically have?&lt;/th&gt;
      &lt;th&gt;What type of cranberry saucedo you typically have? - Other (please specify)&lt;/th&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;th&gt;Have you ever tried to meet up with hometown friends on Thanksgiving night?&lt;/th&gt;
      &lt;th&gt;Have you ever attended a &#34;Friendsgiving?&#34;&lt;/th&gt;
      &lt;th&gt;Will you shop any Black Friday sales on Thanksgiving Day?&lt;/th&gt;
      &lt;th&gt;Do you work in retail?&lt;/th&gt;
      &lt;th&gt;Will you employer make you work on Black Friday?&lt;/th&gt;
      &lt;th&gt;How would you describe where you live?&lt;/th&gt;
      &lt;th&gt;Age&lt;/th&gt;
      &lt;th&gt;What is your gender?&lt;/th&gt;
      &lt;th&gt;How much total combined money did all members of your HOUSEHOLD earn last year?&lt;/th&gt;
      &lt;th&gt;US Region&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;4337954960&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Turkey&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Baked&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Bread-based&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Suburban&lt;/td&gt;
      &lt;td&gt;18 - 29&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;$75,000 to $99,999&lt;/td&gt;
      &lt;td&gt;Middle Atlantic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;4337951949&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Turkey&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Baked&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Bread-based&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Other (please specify)&lt;/td&gt;
      &lt;td&gt;Homemade cranberry gelatin ring&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Rural&lt;/td&gt;
      &lt;td&gt;18 - 29&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;$50,000 to $74,999&lt;/td&gt;
      &lt;td&gt;East South Central&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;4337935621&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Turkey&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Roasted&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Rice-based&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Homemade&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Suburban&lt;/td&gt;
      &lt;td&gt;18 - 29&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;$0 to $9,999&lt;/td&gt;
      &lt;td&gt;Mountain&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;4337933040&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Turkey&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Baked&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Bread-based&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Homemade&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Urban&lt;/td&gt;
      &lt;td&gt;30 - 44&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;$200,000 and up&lt;/td&gt;
      &lt;td&gt;Pacific&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;4337931983&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Tofurkey&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Baked&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Bread-based&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Canned&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Urban&lt;/td&gt;
      &lt;td&gt;30 - 44&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;$100,000 to $124,999&lt;/td&gt;
      &lt;td&gt;Pacific&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;5 rows × 65 columns&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&#34;2-exploring-main-dishes-people-tend-to-eat-during-thanksgiving-dinner&#34;&gt;2) Exploring Main dishes people tend to eat during Thanksgiving dinner&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;thanks_dishes_count = dataset[&#39;What is typically the main dish at your Thanksgiving dinner?&#39;].value_counts()
print(&#39;         Main Dish \n&#39;, thanks_dishes_count)

tofurkey_dish = dataset[dataset[&#39;What is typically the main dish at your Thanksgiving dinner?&#39;] == &#39;Tofurkey&#39;]
tofurkey_have_gravy = tofurkey_dish[&#39;Do you typically have gravy?&#39;]
print(tofurkey_have_gravy)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;         Main Dish
 Turkey                    859
Other (please specify)     35
Ham/Pork                   29
Tofurkey                   20
Chicken                    12
Roast beef                 11
I don&#39;t know                5
Turducken                   3
Name: What is typically the main dish at your Thanksgiving dinner?, dtype: int64
4      Yes
33     Yes
69      No
72      No
77     Yes
145    Yes
175    Yes
218     No
243    Yes
275     No
393    Yes
399    Yes
571    Yes
594    Yes
628     No
774     No
820     No
837    Yes
860     No
953    Yes
Name: Do you typically have gravy?, dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;results&#34;&gt;Results:&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;20 have Tofurkey for dinner&lt;/li&gt;
&lt;li&gt;From those, 12 use gravy on it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-let-s-see-what-pies-people-eat&#34;&gt;3) Let&amp;rsquo;s see what pies people eat&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;apple_isnull = pd.isnull(dataset[&#39;Which type of pie is typically served at your Thanksgiving dinner? Please select all that apply. - Apple&#39;])
pumpkin_isnull = pd.isnull(dataset[&#39;Which type of pie is typically served at your Thanksgiving dinner? Please select all that apply. - Pumpkin&#39;])
pecan_isnull = pd.isnull(dataset[&#39;Which type of pie is typically served at your Thanksgiving dinner? Please select all that apply. - Pecan&#39;])

ate_pies = apple_isnull &amp;amp; pumpkin_isnull &amp;amp; pecan_isnull
print(ate_pies.value_counts())

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False    876
True     182
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-converting-age-to-numeric&#34;&gt;4) Converting Age to Numeric&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def ext_age(age):
    if pd.isnull(age):
        return None

    age_split = age.split(&#39; &#39;)
    age_splited = age_split[0].replace(&#39;+&#39;, &#39;&#39;)
    return int(age_splited)

example = ext_age(dataset[&#39;Age&#39;][14])  

dataset[&#39;int_age&#39;] = dataset[&#39;Age&#39;].apply(ext_age)

dataset[&#39;int_age&#39;].describe()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;count    1025.000000
mean       39.383415
std        15.398493
min        18.000000
25%        30.000000
50%        45.000000
75%        60.000000
max        60.000000
Name: int_age, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;results-1&#34;&gt;Results:&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;As we can observe, with the describe method we have some measurements on the ages we are working with.&lt;/li&gt;
&lt;li&gt;We have to be aware that the ages are not exact, because our original data contains a range and we are taking the lowest age in that range. Not true ages but quitte accurate according to the data we are working with.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset[&#39;Age&#39;].value_counts()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;45 - 59    286
60+        264
30 - 44    259
18 - 29    216
Name: Age, dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;5-converting-income-to-numeric&#34;&gt;5) Converting Income to Numeric&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset[&#39;How much total combined money did all members of your HOUSEHOLD earn last year?&#39;].value_counts()

#Function to convert income_string to a data value.
def ext_income(income):
    if pd.isnull(income):
        return None

    income_split = income.split(&#39; &#39;)
    if income_split[0] == &#39;Prefer&#39;:
        return None
    income_splitted = income_split[0].replace(&amp;quot;$&amp;quot;, &amp;quot;&amp;quot;).replace(&amp;quot;,&amp;quot;, &amp;quot;&amp;quot;)

    return int(income_splitted)

example1 = dataset[&#39;How much total combined money did all members of your HOUSEHOLD earn last year?&#39;][0].split(&#39; &#39;)

dataset[&#39;int_income&#39;]  = dataset[&#39;How much total combined money did all members of your HOUSEHOLD earn last year?&#39;].apply(ext_income)
dataset[&#39;int_income&#39;].describe()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;count       889.000000
mean      74077.615298
std       59360.742902
min           0.000000
25%       25000.000000
50%       50000.000000
75%      100000.000000
max      200000.000000
Name: int_income, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;results-2&#34;&gt;Results:&lt;/h6&gt;

&lt;p&gt;WE should be aware that we have a range of salary but we are only using the lowest value in each range.&lt;/p&gt;

&lt;p&gt;We can se that the mean salary is pretty high. We have also a large standard deviation.&lt;/p&gt;

&lt;h3 id=&#34;6-correlating-travel-distance-and-income&#34;&gt;6) Correlating Travel Distance and Income&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset[&#39;How far will you travel for Thanksgiving?&#39;].value_counts()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Thanksgiving is happening at my home--I won&#39;t travel at all                         396
Thanksgiving is local--it will take place in the town I live in                     276
Thanksgiving is out of town but not too far--it&#39;s a drive of a few hours or less    197
Thanksgiving is out of town and far away--I have to drive several hours or fly       82
Name: How far will you travel for Thanksgiving?, dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset[&#39;How far will you travel for Thanksgiving?&#39;][dataset[&#39;int_income&#39;] &amp;lt; 150000].value_counts()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Thanksgiving is happening at my home--I won&#39;t travel at all                         281
Thanksgiving is local--it will take place in the town I live in                     203
Thanksgiving is out of town but not too far--it&#39;s a drive of a few hours or less    150
Thanksgiving is out of town and far away--I have to drive several hours or fly       55
Name: How far will you travel for Thanksgiving?, dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset[&#39;How far will you travel for Thanksgiving?&#39;][dataset[&#39;int_income&#39;] &amp;gt; 150000].value_counts()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Thanksgiving is happening at my home--I won&#39;t travel at all                         49
Thanksgiving is local--it will take place in the town I live in                     25
Thanksgiving is out of town but not too far--it&#39;s a drive of a few hours or less    16
Thanksgiving is out of town and far away--I have to drive several hours or fly      12
Name: How far will you travel for Thanksgiving?, dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;results-3&#34;&gt;Results:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;People with incomes lower than 150000 is more used to celebrate thankgiing at home and less used to go out of town and far away.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;People with high incomes (&amp;gt;150000) Celebrates it at home as well.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;One interesting data is that people with income lower than 150000 is more used to go out of town but not far away than people with high income, it can be because most of them live out of their family town and they have to move to visit them.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;7-linking-friendship-and-age&#34;&gt;7) Linking Friendship and Age&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset.pivot_table(
    index = &#39;Have you ever tried to meet up with hometown friends on Thanksgiving night?&#39;,
    columns = &#39;Have you ever attended a &amp;quot;Friendsgiving?&amp;quot;&#39;,
    values = &#39;int_age&#39;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style&gt;
    .dataframe thead tr:only-child th {
        text-align: right;
    }

    .dataframe thead th {
        text-align: left;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;Have you ever attended a &#34;Friendsgiving?&#34;&lt;/th&gt;
      &lt;th&gt;No&lt;/th&gt;
      &lt;th&gt;Yes&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Have you ever tried to meet up with hometown friends on Thanksgiving night?&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;No&lt;/th&gt;
      &lt;td&gt;42.283702&lt;/td&gt;
      &lt;td&gt;37.010526&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Yes&lt;/th&gt;
      &lt;td&gt;41.475410&lt;/td&gt;
      &lt;td&gt;33.976744&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset.pivot_table(
    index = &#39;Have you ever tried to meet up with hometown friends on Thanksgiving night?&#39;,
    columns = &#39;Have you ever attended a &amp;quot;Friendsgiving?&amp;quot;&#39;,
    values = &#39;int_income&#39;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style&gt;
    .dataframe thead tr:only-child th {
        text-align: right;
    }

    .dataframe thead th {
        text-align: left;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;Have you ever attended a &#34;Friendsgiving?&#34;&lt;/th&gt;
      &lt;th&gt;No&lt;/th&gt;
      &lt;th&gt;Yes&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Have you ever tried to meet up with hometown friends on Thanksgiving night?&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;No&lt;/th&gt;
      &lt;td&gt;78914.549654&lt;/td&gt;
      &lt;td&gt;72894.736842&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Yes&lt;/th&gt;
      &lt;td&gt;78750.000000&lt;/td&gt;
      &lt;td&gt;66019.736842&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h4 id=&#34;findings&#34;&gt;Findings:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;As we can appreciate, Young people is more likely to celebrate thanksgiving than olders.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Learning Data Visualization with Seaborn and Python. </title>
      <link>https://coderhook-ml.firebaseapp.com/project/learning-data-visualization-with-seaborn/</link>
      <pubDate>Thu, 27 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coderhook-ml.firebaseapp.com/project/learning-data-visualization-with-seaborn/</guid>
      <description>

&lt;h1 id=&#34;learning-data-visualization-with-seaborn-and-python&#34;&gt;Learning Data Visualization with Seaborn and Python.&lt;/h1&gt;

&lt;h3 id=&#34;in-this-project-we-are-going-to-present-some-samples-on-how-to-use-seaborn-to-get-a-better-visualization&#34;&gt;In this project, we are going to present some samples on how to use seaborn to get a better visualization.&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;- We are going to cover:
    - Creating an Histogram.
    - Generating a Density Plot.
    - Modifying the Appearence of the plots.
    - Conditional Distributions Using A Single Condition.
    - Creating Conditional Plots Using Two Conditions.
    - Creating Conditional Plots Using Three Conditions.
    - Adding a Legend
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;creating-an-histogram-with-seaborn&#34;&gt;Creating an Histogram with Seaborn&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

titanic = pd.read_csv(&amp;quot;train.csv&amp;quot;)
cols = [&#39;Survived&#39;, &#39;Pclass&#39;, &#39;Sex&#39;, &#39;Age&#39;, &#39;SibSp&#39;, &#39;Parch&#39;, &#39;Fare&#39;, &#39;Embarked&#39;]

titanic = titanic[cols].dropna()

sns.distplot(titanic[&amp;quot;Age&amp;quot;])
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;E:\Anaconda3\lib\site-packages\statsmodels\nonparametric\kdetools.py:20: VisibleDeprecationWarning: using a non-integer number instead of an integer will result in an error in the future
  y = X[:m/2+1] + np.r_[0,X[m/2+1:],0]*1j
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://coderhook-ml.firebaseapp.com/img/ds/seaborn/output_2_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;generating-a-kernel-density-plot&#34;&gt;Generating A Kernel Density Plot&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.kdeplot(titanic[&amp;quot;Age&amp;quot;], shade=&amp;quot;true&amp;quot;)
plt.xlabel(&amp;quot;Age&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;E:\Anaconda3\lib\site-packages\statsmodels\nonparametric\kdetools.py:20: VisibleDeprecationWarning: using a non-integer number instead of an integer will result in an error in the future
  y = X[:m/2+1] + np.r_[0,X[m/2+1:],0]*1j
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://coderhook-ml.firebaseapp.com/img/ds/seaborn/output_4_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;modifying-the-appearance-of-the-plots&#34;&gt;Modifying The Appearance Of The Plots&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.set_style(&amp;quot;white&amp;quot;)
sns.kdeplot(titanic[&amp;quot;Age&amp;quot;], shade=&amp;quot;true&amp;quot;)
sns.despine(left=&amp;quot;true&amp;quot;, bottom=&amp;quot;true&amp;quot;)
plt.xlabel(&amp;quot;Age&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;E:\Anaconda3\lib\site-packages\statsmodels\nonparametric\kdetools.py:20: VisibleDeprecationWarning: using a non-integer number instead of an integer will result in an error in the future
  y = X[:m/2+1] + np.r_[0,X[m/2+1:],0]*1j





&amp;lt;matplotlib.text.Text at 0x9635cb0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://coderhook-ml.firebaseapp.com/img/ds/seaborn/output_7_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;conditional-distributions-using-a-single-condition&#34;&gt;Conditional Distributions Using A Single Condition&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;g = sns.FacetGrid(titanic, col=&amp;quot;Pclass&amp;quot;, size = 6)
g.map(sns.kdeplot, &amp;quot;Age&amp;quot;, shade=&amp;quot;true&amp;quot;)
sns.despine(left=&amp;quot;true&amp;quot;, bottom=&amp;quot;true&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;E:\Anaconda3\lib\site-packages\statsmodels\nonparametric\kdetools.py:20: VisibleDeprecationWarning: using a non-integer number instead of an integer will result in an error in the future
  y = X[:m/2+1] + np.r_[0,X[m/2+1:],0]*1j
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://coderhook-ml.firebaseapp.com/img/ds/seaborn/output_9_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://coderhook-ml.firebaseapp.com/img/ds/seaborn/output_9_2.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;creating-conditional-plots-using-two-conditions&#34;&gt;Creating Conditional Plots Using Two Conditions&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;g = sns.FacetGrid(titanic, col=&amp;quot;Pclass&amp;quot;, row=&amp;quot;Survived&amp;quot;)
g.map(sns.kdeplot, &amp;quot;Age&amp;quot;, shade=True)
sns.despine(left=True, bottom=True)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;E:\Anaconda3\lib\site-packages\statsmodels\nonparametric\kdetools.py:20: VisibleDeprecationWarning: using a non-integer number instead of an integer will result in an error in the future
  y = X[:m/2+1] + np.r_[0,X[m/2+1:],0]*1j
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://coderhook-ml.firebaseapp.com/img/ds/seaborn/output_11_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;creating-conditional-plots-using-three-conditions&#34;&gt;Creating Conditional Plots Using Three Conditions&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;g = sns.FacetGrid(titanic, col=&amp;quot;Survived&amp;quot;, row=&amp;quot;Pclass&amp;quot;, hue=&amp;quot;Sex&amp;quot;)
g.map(sns.kdeplot, &amp;quot;Age&amp;quot;, shade=True)
sns.despine(left=True, bottom=True)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;E:\Anaconda3\lib\site-packages\statsmodels\nonparametric\kdetools.py:20: VisibleDeprecationWarning: using a non-integer number instead of an integer will result in an error in the future
  y = X[:m/2+1] + np.r_[0,X[m/2+1:],0]*1j
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://coderhook-ml.firebaseapp.com/img/ds/seaborn/output_13_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;adding-a-legend&#34;&gt;Adding a Legend&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;g = sns.FacetGrid(titanic, col=&amp;quot;Survived&amp;quot;, row=&amp;quot;Pclass&amp;quot;, hue=&amp;quot;Sex&amp;quot;)
g.map(sns.kdeplot, &amp;quot;Age&amp;quot;, shade=True).add_legend()
sns.despine(left=True, bottom = True)
plt.show()

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;E:\Anaconda3\lib\site-packages\statsmodels\nonparametric\kdetools.py:20: VisibleDeprecationWarning: using a non-integer number instead of an integer will result in an error in the future
  y = X[:m/2+1] + np.r_[0,X[m/2+1:],0]*1j
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://coderhook-ml.firebaseapp.com/img/ds/seaborn/output_15_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://seaborn.pydata.org/generated/seaborn.FacetGrid.html#seaborn.FacetGrid&#34; target=&#34;_blank&#34;&gt;http://seaborn.pydata.org/generated/seaborn.FacetGrid.html#seaborn.FacetGrid&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title> Using Matplotlib, first steps. </title>
      <link>https://coderhook-ml.firebaseapp.com/project/first-time-with-matplotlib/</link>
      <pubDate>Wed, 26 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coderhook-ml.firebaseapp.com/project/first-time-with-matplotlib/</guid>
      <description>

&lt;h1 id=&#34;first-time-with-matplotlib&#34;&gt;First Time with Matplotlib.&lt;/h1&gt;

&lt;h3 id=&#34;an-easy-way-to-visualize-data-using-the-main-tools-availables&#34;&gt;An easy way to visualize data using the main tools availables.&lt;/h3&gt;

&lt;p&gt;In this notebook we are going to show 3 kind of plots:
    - Linear Plots: Gave a good sense on the tendency of the data.
    - Scatter Plot: Great to see if the data follow a tendency or if it is too &amp;ldquo;scatter&amp;rdquo;.
    - Bar Plots: Easy to compare data an see which of the variables appears more frequently or even the distribution of it.&lt;/p&gt;

&lt;h5 id=&#34;after-it-we-will-extract-some-insight-that-will-help-us-for-following-researchs&#34;&gt;After it, we will extract some insight that will help us for following researchs.&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%matplotlib inline

import matplotlib.pyplot as plt
import pandas as pd

unrate = pd.read_csv(&amp;quot;unrate.csv&amp;quot;)
unrate[&#39;DATE&#39;] = pd.to_datetime(unrate[&#39;DATE&#39;]) #pd.to_datetime() transforms date string into a date format.

plt.plot(unrate[&#39;DATE&#39;][0:12], unrate[&#39;VALUE&#39;][:12])
plt.xticks(rotation = 90)
plt.xlabel(&amp;quot;Month&amp;quot;)
plt.ylabel(&amp;quot;Unemployment Rate&amp;quot;)
plt.title(&amp;quot;Monthly Unemployment Trends, 1948&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://coderhook-ml.firebaseapp.com/img/ds/matplotlib/output_1_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(10,6))
colors = [&#39;red&#39;, &#39;blue&#39;, &#39;green&#39;, &#39;orange&#39;, &#39;black&#39;]
labels = [&#39;1948&#39;, &#39;1949&#39;, &#39;1950&#39;, &#39;1951&#39;, &#39;1952&#39;]
unrate[&#39;MONTH&#39;] = unrate[&#39;DATE&#39;].dt.month

for i in range(5):
    start_index = i*12
    end_index = (i+1)*12
    subset = unrate[start_index:end_index]
    label = str(1948 + i)
    plt.plot(subset[&#39;MONTH&#39;], subset[&#39;VALUE&#39;], c=colors[i], label=labels[i])
plt.title(&amp;quot;Monthly Unemployment Trends, 1948-1952&amp;quot;)
plt.xlabel(&amp;quot;Month, Integer&amp;quot;)
plt.ylabel(&amp;quot;Unemployment Rate, Percent&amp;quot;)
plt.legend(loc=&#39;upper left&#39;)

plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://coderhook-ml.firebaseapp.com/img/ds/matplotlib/output_2_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;scatter-plot-bar-plot&#34;&gt;Scatter Plot &amp;amp; Bar Plot&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import seaborn as sns

df = pd.read_csv(&amp;quot;fandango_score_comparison.csv&amp;quot;)

columns = [&#39;FILM&#39;, &#39;RT_user_norm&#39;, &#39;Metacritic_user_nom&#39;, &#39;IMDB_norm&#39;, &#39;Fandango_Ratingvalue&#39;, &#39;Fandango_Stars&#39;, &#39;Metacritic_norm_round&#39;]

df = review[columns]

df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style&gt;
    .dataframe thead tr:only-child th {
        text-align: right;
    }

    .dataframe thead th {
        text-align: left;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;FILM&lt;/th&gt;
      &lt;th&gt;RT_user_norm&lt;/th&gt;
      &lt;th&gt;Metacritic_user_nom&lt;/th&gt;
      &lt;th&gt;IMDB_norm&lt;/th&gt;
      &lt;th&gt;Fandango_Ratingvalue&lt;/th&gt;
      &lt;th&gt;Fandango_Stars&lt;/th&gt;
      &lt;th&gt;Metacritic_norm_round&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Avengers: Age of Ultron (2015)&lt;/td&gt;
      &lt;td&gt;4.3&lt;/td&gt;
      &lt;td&gt;3.55&lt;/td&gt;
      &lt;td&gt;3.90&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Cinderella (2015)&lt;/td&gt;
      &lt;td&gt;4.0&lt;/td&gt;
      &lt;td&gt;3.75&lt;/td&gt;
      &lt;td&gt;3.55&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Ant-Man (2015)&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;4.05&lt;/td&gt;
      &lt;td&gt;3.90&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Do You Believe? (2015)&lt;/td&gt;
      &lt;td&gt;4.2&lt;/td&gt;
      &lt;td&gt;2.35&lt;/td&gt;
      &lt;td&gt;2.70&lt;/td&gt;
      &lt;td&gt;4.5&lt;/td&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Hot Tub Time Machine 2 (2015)&lt;/td&gt;
      &lt;td&gt;1.4&lt;/td&gt;
      &lt;td&gt;1.70&lt;/td&gt;
      &lt;td&gt;2.55&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.scatter(df[&#39;Metacritic_norm_round&#39;], df[&#39;Fandango_Stars&#39;])
sns.plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://coderhook-ml.firebaseapp.com/img/ds/matplotlib/output_5_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;bar-plot&#34;&gt;Bar Plot&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Bar plot are really useful to compare data between some variables, in this case we can compare easily for instance, each of the columns with the frecuency.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;Metacritic_norm_round&#39;].plot(kind=&amp;quot;hist&amp;quot;)
df[&#39;Fandango_Stars&#39;].plot(kind=&amp;quot;hist&amp;quot;)
plt.legend()
sns.plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://coderhook-ml.firebaseapp.com/img/ds/matplotlib/output_7_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In this case we can see somethign really interesting, Fandango_Stars doesnt have valuation less than 3 which is suspicious, and should result in more things to look for on the data to see what is happening there.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Is it super easy to compare data using matplotlib, we also learnt that seaborn can gave us other sense on the visualization and make this more understandable and finally, we practice the 3 kind of plots, inear plots, Scatter plot and Bar plot.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Bike Rentals Prediction</title>
      <link>https://coderhook-ml.firebaseapp.com/project/bike-rentals-prediction/</link>
      <pubDate>Thu, 27 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coderhook-ml.firebaseapp.com/project/bike-rentals-prediction/</guid>
      <description>

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

bike_rentals = pd.read_csv(&amp;quot;bike_rental_hour.csv&amp;quot;)

print(bike_rentals.head())
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;   instant      dteday  season  yr  mnth  hr  holiday  weekday  workingday  \
0        1  2011-01-01       1   0     1   0        0        6           0   
1        2  2011-01-01       1   0     1   1        0        6           0   
2        3  2011-01-01       1   0     1   2        0        6           0   
3        4  2011-01-01       1   0     1   3        0        6           0   
4        5  2011-01-01       1   0     1   4        0        6           0   

   weathersit  temp   atemp   hum  windspeed  casual  registered  cnt  
0           1  0.24  0.2879  0.81        0.0       3          13   16  
1           1  0.22  0.2727  0.80        0.0       8          32   40  
2           1  0.22  0.2727  0.80        0.0       5          27   32  
3           1  0.24  0.2879  0.75        0.0       3          10   13  
4           1  0.24  0.2879  0.75        0.0       0           1    1  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.hist(bike_rentals[&#39;cnt&#39;])
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://coderhook-ml.firebaseapp.com/img/ds/bike/output_1_0.png&#34; alt=&#34;jpg&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;bike_rentals.corr()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;instant&lt;/th&gt;
      &lt;th&gt;season&lt;/th&gt;
      &lt;th&gt;yr&lt;/th&gt;
      &lt;th&gt;mnth&lt;/th&gt;
      &lt;th&gt;hr&lt;/th&gt;
      &lt;th&gt;holiday&lt;/th&gt;
      &lt;th&gt;weekday&lt;/th&gt;
      &lt;th&gt;workingday&lt;/th&gt;
      &lt;th&gt;weathersit&lt;/th&gt;
      &lt;th&gt;temp&lt;/th&gt;
      &lt;th&gt;atemp&lt;/th&gt;
      &lt;th&gt;hum&lt;/th&gt;
      &lt;th&gt;windspeed&lt;/th&gt;
      &lt;th&gt;casual&lt;/th&gt;
      &lt;th&gt;registered&lt;/th&gt;
      &lt;th&gt;cnt&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;instant&lt;/th&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;0.404046&lt;/td&gt;
      &lt;td&gt;0.866014&lt;/td&gt;
      &lt;td&gt;0.489164&lt;/td&gt;
      &lt;td&gt;-0.004775&lt;/td&gt;
      &lt;td&gt;0.014723&lt;/td&gt;
      &lt;td&gt;0.001357&lt;/td&gt;
      &lt;td&gt;-0.003416&lt;/td&gt;
      &lt;td&gt;-0.014198&lt;/td&gt;
      &lt;td&gt;0.136178&lt;/td&gt;
      &lt;td&gt;0.137615&lt;/td&gt;
      &lt;td&gt;0.009577&lt;/td&gt;
      &lt;td&gt;-0.074505&lt;/td&gt;
      &lt;td&gt;0.158295&lt;/td&gt;
      &lt;td&gt;0.282046&lt;/td&gt;
      &lt;td&gt;0.278379&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;season&lt;/th&gt;
      &lt;td&gt;0.404046&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;-0.010742&lt;/td&gt;
      &lt;td&gt;0.830386&lt;/td&gt;
      &lt;td&gt;-0.006117&lt;/td&gt;
      &lt;td&gt;-0.009585&lt;/td&gt;
      &lt;td&gt;-0.002335&lt;/td&gt;
      &lt;td&gt;0.013743&lt;/td&gt;
      &lt;td&gt;-0.014524&lt;/td&gt;
      &lt;td&gt;0.312025&lt;/td&gt;
      &lt;td&gt;0.319380&lt;/td&gt;
      &lt;td&gt;0.150625&lt;/td&gt;
      &lt;td&gt;-0.149773&lt;/td&gt;
      &lt;td&gt;0.120206&lt;/td&gt;
      &lt;td&gt;0.174226&lt;/td&gt;
      &lt;td&gt;0.178056&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;yr&lt;/th&gt;
      &lt;td&gt;0.866014&lt;/td&gt;
      &lt;td&gt;-0.010742&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;-0.010473&lt;/td&gt;
      &lt;td&gt;-0.003867&lt;/td&gt;
      &lt;td&gt;0.006692&lt;/td&gt;
      &lt;td&gt;-0.004485&lt;/td&gt;
      &lt;td&gt;-0.002196&lt;/td&gt;
      &lt;td&gt;-0.019157&lt;/td&gt;
      &lt;td&gt;0.040913&lt;/td&gt;
      &lt;td&gt;0.039222&lt;/td&gt;
      &lt;td&gt;-0.083546&lt;/td&gt;
      &lt;td&gt;-0.008740&lt;/td&gt;
      &lt;td&gt;0.142779&lt;/td&gt;
      &lt;td&gt;0.253684&lt;/td&gt;
      &lt;td&gt;0.250495&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;mnth&lt;/th&gt;
      &lt;td&gt;0.489164&lt;/td&gt;
      &lt;td&gt;0.830386&lt;/td&gt;
      &lt;td&gt;-0.010473&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;-0.005772&lt;/td&gt;
      &lt;td&gt;0.018430&lt;/td&gt;
      &lt;td&gt;0.010400&lt;/td&gt;
      &lt;td&gt;-0.003477&lt;/td&gt;
      &lt;td&gt;0.005400&lt;/td&gt;
      &lt;td&gt;0.201691&lt;/td&gt;
      &lt;td&gt;0.208096&lt;/td&gt;
      &lt;td&gt;0.164411&lt;/td&gt;
      &lt;td&gt;-0.135386&lt;/td&gt;
      &lt;td&gt;0.068457&lt;/td&gt;
      &lt;td&gt;0.122273&lt;/td&gt;
      &lt;td&gt;0.120638&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;hr&lt;/th&gt;
      &lt;td&gt;-0.004775&lt;/td&gt;
      &lt;td&gt;-0.006117&lt;/td&gt;
      &lt;td&gt;-0.003867&lt;/td&gt;
      &lt;td&gt;-0.005772&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;0.000479&lt;/td&gt;
      &lt;td&gt;-0.003498&lt;/td&gt;
      &lt;td&gt;0.002285&lt;/td&gt;
      &lt;td&gt;-0.020203&lt;/td&gt;
      &lt;td&gt;0.137603&lt;/td&gt;
      &lt;td&gt;0.133750&lt;/td&gt;
      &lt;td&gt;-0.276498&lt;/td&gt;
      &lt;td&gt;0.137252&lt;/td&gt;
      &lt;td&gt;0.301202&lt;/td&gt;
      &lt;td&gt;0.374141&lt;/td&gt;
      &lt;td&gt;0.394071&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;holiday&lt;/th&gt;
      &lt;td&gt;0.014723&lt;/td&gt;
      &lt;td&gt;-0.009585&lt;/td&gt;
      &lt;td&gt;0.006692&lt;/td&gt;
      &lt;td&gt;0.018430&lt;/td&gt;
      &lt;td&gt;0.000479&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;-0.102088&lt;/td&gt;
      &lt;td&gt;-0.252471&lt;/td&gt;
      &lt;td&gt;-0.017036&lt;/td&gt;
      &lt;td&gt;-0.027340&lt;/td&gt;
      &lt;td&gt;-0.030973&lt;/td&gt;
      &lt;td&gt;-0.010588&lt;/td&gt;
      &lt;td&gt;0.003988&lt;/td&gt;
      &lt;td&gt;0.031564&lt;/td&gt;
      &lt;td&gt;-0.047345&lt;/td&gt;
      &lt;td&gt;-0.030927&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;weekday&lt;/th&gt;
      &lt;td&gt;0.001357&lt;/td&gt;
      &lt;td&gt;-0.002335&lt;/td&gt;
      &lt;td&gt;-0.004485&lt;/td&gt;
      &lt;td&gt;0.010400&lt;/td&gt;
      &lt;td&gt;-0.003498&lt;/td&gt;
      &lt;td&gt;-0.102088&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;0.035955&lt;/td&gt;
      &lt;td&gt;0.003311&lt;/td&gt;
      &lt;td&gt;-0.001795&lt;/td&gt;
      &lt;td&gt;-0.008821&lt;/td&gt;
      &lt;td&gt;-0.037158&lt;/td&gt;
      &lt;td&gt;0.011502&lt;/td&gt;
      &lt;td&gt;0.032721&lt;/td&gt;
      &lt;td&gt;0.021578&lt;/td&gt;
      &lt;td&gt;0.026900&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;workingday&lt;/th&gt;
      &lt;td&gt;-0.003416&lt;/td&gt;
      &lt;td&gt;0.013743&lt;/td&gt;
      &lt;td&gt;-0.002196&lt;/td&gt;
      &lt;td&gt;-0.003477&lt;/td&gt;
      &lt;td&gt;0.002285&lt;/td&gt;
      &lt;td&gt;-0.252471&lt;/td&gt;
      &lt;td&gt;0.035955&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;0.044672&lt;/td&gt;
      &lt;td&gt;0.055390&lt;/td&gt;
      &lt;td&gt;0.054667&lt;/td&gt;
      &lt;td&gt;0.015688&lt;/td&gt;
      &lt;td&gt;-0.011830&lt;/td&gt;
      &lt;td&gt;-0.300942&lt;/td&gt;
      &lt;td&gt;0.134326&lt;/td&gt;
      &lt;td&gt;0.030284&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;weathersit&lt;/th&gt;
      &lt;td&gt;-0.014198&lt;/td&gt;
      &lt;td&gt;-0.014524&lt;/td&gt;
      &lt;td&gt;-0.019157&lt;/td&gt;
      &lt;td&gt;0.005400&lt;/td&gt;
      &lt;td&gt;-0.020203&lt;/td&gt;
      &lt;td&gt;-0.017036&lt;/td&gt;
      &lt;td&gt;0.003311&lt;/td&gt;
      &lt;td&gt;0.044672&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;-0.102640&lt;/td&gt;
      &lt;td&gt;-0.105563&lt;/td&gt;
      &lt;td&gt;0.418130&lt;/td&gt;
      &lt;td&gt;0.026226&lt;/td&gt;
      &lt;td&gt;-0.152628&lt;/td&gt;
      &lt;td&gt;-0.120966&lt;/td&gt;
      &lt;td&gt;-0.142426&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;temp&lt;/th&gt;
      &lt;td&gt;0.136178&lt;/td&gt;
      &lt;td&gt;0.312025&lt;/td&gt;
      &lt;td&gt;0.040913&lt;/td&gt;
      &lt;td&gt;0.201691&lt;/td&gt;
      &lt;td&gt;0.137603&lt;/td&gt;
      &lt;td&gt;-0.027340&lt;/td&gt;
      &lt;td&gt;-0.001795&lt;/td&gt;
      &lt;td&gt;0.055390&lt;/td&gt;
      &lt;td&gt;-0.102640&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;0.987672&lt;/td&gt;
      &lt;td&gt;-0.069881&lt;/td&gt;
      &lt;td&gt;-0.023125&lt;/td&gt;
      &lt;td&gt;0.459616&lt;/td&gt;
      &lt;td&gt;0.335361&lt;/td&gt;
      &lt;td&gt;0.404772&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;atemp&lt;/th&gt;
      &lt;td&gt;0.137615&lt;/td&gt;
      &lt;td&gt;0.319380&lt;/td&gt;
      &lt;td&gt;0.039222&lt;/td&gt;
      &lt;td&gt;0.208096&lt;/td&gt;
      &lt;td&gt;0.133750&lt;/td&gt;
      &lt;td&gt;-0.030973&lt;/td&gt;
      &lt;td&gt;-0.008821&lt;/td&gt;
      &lt;td&gt;0.054667&lt;/td&gt;
      &lt;td&gt;-0.105563&lt;/td&gt;
      &lt;td&gt;0.987672&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;-0.051918&lt;/td&gt;
      &lt;td&gt;-0.062336&lt;/td&gt;
      &lt;td&gt;0.454080&lt;/td&gt;
      &lt;td&gt;0.332559&lt;/td&gt;
      &lt;td&gt;0.400929&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;hum&lt;/th&gt;
      &lt;td&gt;0.009577&lt;/td&gt;
      &lt;td&gt;0.150625&lt;/td&gt;
      &lt;td&gt;-0.083546&lt;/td&gt;
      &lt;td&gt;0.164411&lt;/td&gt;
      &lt;td&gt;-0.276498&lt;/td&gt;
      &lt;td&gt;-0.010588&lt;/td&gt;
      &lt;td&gt;-0.037158&lt;/td&gt;
      &lt;td&gt;0.015688&lt;/td&gt;
      &lt;td&gt;0.418130&lt;/td&gt;
      &lt;td&gt;-0.069881&lt;/td&gt;
      &lt;td&gt;-0.051918&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;-0.290105&lt;/td&gt;
      &lt;td&gt;-0.347028&lt;/td&gt;
      &lt;td&gt;-0.273933&lt;/td&gt;
      &lt;td&gt;-0.322911&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;windspeed&lt;/th&gt;
      &lt;td&gt;-0.074505&lt;/td&gt;
      &lt;td&gt;-0.149773&lt;/td&gt;
      &lt;td&gt;-0.008740&lt;/td&gt;
      &lt;td&gt;-0.135386&lt;/td&gt;
      &lt;td&gt;0.137252&lt;/td&gt;
      &lt;td&gt;0.003988&lt;/td&gt;
      &lt;td&gt;0.011502&lt;/td&gt;
      &lt;td&gt;-0.011830&lt;/td&gt;
      &lt;td&gt;0.026226&lt;/td&gt;
      &lt;td&gt;-0.023125&lt;/td&gt;
      &lt;td&gt;-0.062336&lt;/td&gt;
      &lt;td&gt;-0.290105&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;0.090287&lt;/td&gt;
      &lt;td&gt;0.082321&lt;/td&gt;
      &lt;td&gt;0.093234&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;casual&lt;/th&gt;
      &lt;td&gt;0.158295&lt;/td&gt;
      &lt;td&gt;0.120206&lt;/td&gt;
      &lt;td&gt;0.142779&lt;/td&gt;
      &lt;td&gt;0.068457&lt;/td&gt;
      &lt;td&gt;0.301202&lt;/td&gt;
      &lt;td&gt;0.031564&lt;/td&gt;
      &lt;td&gt;0.032721&lt;/td&gt;
      &lt;td&gt;-0.300942&lt;/td&gt;
      &lt;td&gt;-0.152628&lt;/td&gt;
      &lt;td&gt;0.459616&lt;/td&gt;
      &lt;td&gt;0.454080&lt;/td&gt;
      &lt;td&gt;-0.347028&lt;/td&gt;
      &lt;td&gt;0.090287&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;0.506618&lt;/td&gt;
      &lt;td&gt;0.694564&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;registered&lt;/th&gt;
      &lt;td&gt;0.282046&lt;/td&gt;
      &lt;td&gt;0.174226&lt;/td&gt;
      &lt;td&gt;0.253684&lt;/td&gt;
      &lt;td&gt;0.122273&lt;/td&gt;
      &lt;td&gt;0.374141&lt;/td&gt;
      &lt;td&gt;-0.047345&lt;/td&gt;
      &lt;td&gt;0.021578&lt;/td&gt;
      &lt;td&gt;0.134326&lt;/td&gt;
      &lt;td&gt;-0.120966&lt;/td&gt;
      &lt;td&gt;0.335361&lt;/td&gt;
      &lt;td&gt;0.332559&lt;/td&gt;
      &lt;td&gt;-0.273933&lt;/td&gt;
      &lt;td&gt;0.082321&lt;/td&gt;
      &lt;td&gt;0.506618&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;0.972151&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;cnt&lt;/th&gt;
      &lt;td&gt;0.278379&lt;/td&gt;
      &lt;td&gt;0.178056&lt;/td&gt;
      &lt;td&gt;0.250495&lt;/td&gt;
      &lt;td&gt;0.120638&lt;/td&gt;
      &lt;td&gt;0.394071&lt;/td&gt;
      &lt;td&gt;-0.030927&lt;/td&gt;
      &lt;td&gt;0.026900&lt;/td&gt;
      &lt;td&gt;0.030284&lt;/td&gt;
      &lt;td&gt;-0.142426&lt;/td&gt;
      &lt;td&gt;0.404772&lt;/td&gt;
      &lt;td&gt;0.400929&lt;/td&gt;
      &lt;td&gt;-0.322911&lt;/td&gt;
      &lt;td&gt;0.093234&lt;/td&gt;
      &lt;td&gt;0.694564&lt;/td&gt;
      &lt;td&gt;0.972151&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h1 id=&#34;calculating-features&#34;&gt;Calculating Features&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;We are going to introduce some order in hour data by separating the hours in terms of morning, afternoon, evening and night&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def assign_label(hour):
    if (hour &amp;gt; 6 ) &amp;amp; (hour &amp;lt;= 12):
        return 1
    if (hour &amp;gt; 12 ) &amp;amp; (hour &amp;lt;= 18):
        return 2
    if (hour &amp;gt; 18 ) &amp;amp; (hour &amp;lt;= 24):
        return 3
    if (hour &amp;gt;= 0 ) &amp;amp; (hour &amp;lt;= 6):
        return 4

bike_rentals[&#39;time_label&#39;] = bike_rentals[&#39;hr&#39;].apply(lambda x: assign_label(x))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(bike_rentals.head())
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;   instant      dteday  season  yr  mnth  hr  holiday  weekday  workingday  \
0        1  2011-01-01       1   0     1   0        0        6           0   
1        2  2011-01-01       1   0     1   1        0        6           0   
2        3  2011-01-01       1   0     1   2        0        6           0   
3        4  2011-01-01       1   0     1   3        0        6           0   
4        5  2011-01-01       1   0     1   4        0        6           0   

   weathersit  temp   atemp   hum  windspeed  casual  registered  cnt  \
0           1  0.24  0.2879  0.81        0.0       3          13   16   
1           1  0.22  0.2727  0.80        0.0       8          32   40   
2           1  0.22  0.2727  0.80        0.0       5          27   32   
3           1  0.24  0.2879  0.75        0.0       3          10   13   
4           1  0.24  0.2879  0.75        0.0       0           1    1   

   time_label  
0           4  
1           4  
2           4  
3           4  
4           4  
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;splitting-the-data-into-train-and-test-sets&#34;&gt;Splitting The Data Into Train And Test Sets&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;In this case we are going to use the Mean Squared error, which make sense for our continous data.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;how_many_rows = np.int(len(bike_rentals) * .8)

train = bike_rentals.sample(frac=.8)
test = bike_rentals.loc[~bike_rentals.index.isin(train.index)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;predictors = list(bike_rentals.columns)

predictors.remove(&#39;cnt&#39;)
predictors.remove(&#39;casual&#39;)
predictors.remove(&#39;dteday&#39;)
predictors.remove(&#39;registered&#39;)

print(predictors)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;instant&#39;, &#39;season&#39;, &#39;yr&#39;, &#39;mnth&#39;, &#39;hr&#39;, &#39;holiday&#39;, &#39;weekday&#39;, &#39;workingday&#39;, &#39;weathersit&#39;, &#39;temp&#39;, &#39;atemp&#39;, &#39;hum&#39;, &#39;windspeed&#39;, &#39;time_label&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn.linear_model import LinearRegression

model = LinearRegression()
model.fit(train[predictors], train[&#39;cnt&#39;])

predict = model.predict(test[predictors])

mse = np.mean((test[&#39;cnt&#39;] - predict) ** 2)

print(&#39;error: &#39;, mse)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;error:  16211.415323715768
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Thought about the error:

&lt;ul&gt;
&lt;li&gt;It is very high, so it should be due to the reason that some data is too high and then there comes this high mean squared.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;applying-decision-trees&#34;&gt;Applying Decision Trees&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;In order to choose which model fits better our data we are going to checck how decision trees work with this dataframe and after that we will see which one though us a bigger error so we can compare.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn.tree import DecisionTreeRegressor

model_tree = DecisionTreeRegressor()
model_tree.fit(train[predictors], train[&#39;cnt&#39;])
predictions_tree = model_tree.predict(test[predictors])

mse_tree = np.mean((test[&#39;cnt&#39;] - predictions_tree) ** 2)

print(&#39;mse_tree: &#39;, mse_tree)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;mse_tree:  3138.406501726122
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;As we can see, using decision tree we are going to get more accuracy in our predictions than with linearregression, because as we proved, the mean squared error is smaller in the dec tree than in Linear regression.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;applying-random-forest&#34;&gt;Applying Random Forest&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn.ensemble import RandomForestRegressor

model_forest = RandomForestRegressor()
model_forest.fit(train[predictors], train[&#39;cnt&#39;])
predict_forest = model_forest.predict(test[predictors])

mse_forest = np.mean((test[&#39;cnt&#39;] - predict_forest) ** 2)

print(&#39;mse_forest: &#39;, mse_forest)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;mse_forest:  1906.2452301495964
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Github link:
`https://github.com/coderHook/Project---Predicting-Bike-Rentals-using-Forest-Decision-Model`
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Creating Relations in SQL database and Python.</title>
      <link>https://coderhook-ml.firebaseapp.com/project/proj_sql_relations/</link>
      <pubDate>Thu, 27 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coderhook-ml.firebaseapp.com/project/proj_sql_relations/</guid>
      <description>

&lt;h1 id=&#34;creating-relations-in-sql-and-python&#34;&gt;Creating Relations in SQL and Python&lt;/h1&gt;

&lt;h3 id=&#34;in-this-project-we-are-going-to-create-relations-using-sqlite3-and-python-we-are-going-to&#34;&gt;In this project we are going to create relations using Sqlite3 and python, we are going to:&lt;/h3&gt;

&lt;p&gt;[TOC]&lt;/p&gt;

&lt;h4 id=&#34;creating-the-ceremonies-table&#34;&gt;Creating The Ceremonies Table&lt;/h4&gt;

&lt;h4 id=&#34;foreign-key-constraints&#34;&gt;Foreign Key Constraints&lt;/h4&gt;

&lt;h4 id=&#34;setting-up-one-to-many&#34;&gt;Setting Up One-To-Many&lt;/h4&gt;

&lt;h4 id=&#34;deleting-and-renaming-tables&#34;&gt;Deleting And Renaming Tables&lt;/h4&gt;

&lt;h4 id=&#34;creating-a-join-table&#34;&gt;Creating A Join Table&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

conn = sqlite3.connect(&amp;quot;nominations.db&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;schema = conn.execute(&amp;quot;PRAGMA table_info(nominations);&amp;quot;).fetchall()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;first_ten = conn.execute(&amp;quot;SELECT * FROM nominations LIMIT 10;&amp;quot;).fetchall()
for s in schema:
    print(s)

for row in first_ten:
    print(row)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(0, &#39;Year&#39;, &#39;INTEGER&#39;, 0, None, 0)
(1, &#39;Category&#39;, &#39;TEXT&#39;, 0, None, 0)
(2, &#39;Nominee&#39;, &#39;TEXT&#39;, 0, None, 0)
(3, &#39;Won&#39;, &#39;INTEGER&#39;, 0, None, 0)
(4, &#39;Movie&#39;, &#39;TEXT&#39;, 0, None, 0)
(5, &#39;Character&#39;, &#39;TEXT&#39;, 0, None, 0)
(2010, &#39;Actor -- Leading Role&#39;, &#39;Javier Bardem&#39;, 0, &#39;Biutiful&#39;, &#39;Uxbal&#39;)
(2010, &#39;Actor -- Leading Role&#39;, &#39;Jeff Bridges&#39;, 0, &#39;True Grit&#39;, &#39;Rooster Cogburn&#39;)
(2010, &#39;Actor -- Leading Role&#39;, &#39;Jesse Eisenberg&#39;, 0, &#39;The Social Network&#39;, &#39;Mark Zuckerberg&#39;)
(2010, &#39;Actor -- Leading Role&#39;, &#39;Colin Firth&#39;, 1, &amp;quot;The King&#39;s Speech&amp;quot;, &#39;King George VI&#39;)
(2010, &#39;Actor -- Leading Role&#39;, &#39;James Franco&#39;, 0, &#39;127 Hours&#39;, &#39;Aron Ralston&#39;)
(2010, &#39;Actor -- Supporting Role&#39;, &#39;Christian Bale&#39;, 1, &#39;The Fighter&#39;, &#39;Dicky Eklund&#39;)
(2010, &#39;Actor -- Supporting Role&#39;, &#39;John Hawkes&#39;, 0, &amp;quot;Winter&#39;s Bone&amp;quot;, &#39;Teardrop&#39;)
(2010, &#39;Actor -- Supporting Role&#39;, &#39;Jeremy Renner&#39;, 0, &#39;The Town&#39;, &#39;James Coughlin&#39;)
(2010, &#39;Actor -- Supporting Role&#39;, &#39;Mark Ruffalo&#39;, 0, &#39;The Kids Are All Right&#39;, &#39;Paul&#39;)
(2010, &#39;Actor -- Supporting Role&#39;, &#39;Geoffrey Rush&#39;, 0, &amp;quot;The King&#39;s Speech&amp;quot;, &#39;Lionel Logue&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;creating-the-ceremonies-table-1&#34;&gt;Creating The Ceremonies Table&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;years_hosts = [(2010, &amp;quot;Steve Martin&amp;quot;),
               (2009, &amp;quot;Hugh Jackman&amp;quot;),
               (2008, &amp;quot;Jon Stewart&amp;quot;),
               (2007, &amp;quot;Ellen DeGeneres&amp;quot;),
               (2006, &amp;quot;Jon Stewart&amp;quot;),
               (2005, &amp;quot;Chris Rock&amp;quot;),
               (2004, &amp;quot;Billy Crystal&amp;quot;),
               (2003, &amp;quot;Steve Martin&amp;quot;),
               (2002, &amp;quot;Whoopi Goldberg&amp;quot;),
               (2001, &amp;quot;Steve Martin&amp;quot;),
               (2000, &amp;quot;Billy Crystal&amp;quot;),
            ]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;create_ceremonies = &amp;quot;CREATE TABLE ceremonies (id integer PRIMARY KEY,Year integer,Host text);&amp;quot;
conn.execute(create_ceremonies)



&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;OperationalErrorTraceback (most recent call last)

&amp;lt;ipython-input-6-9cde5619bf5a&amp;gt; in &amp;lt;module&amp;gt;()
      1 create_ceremonies = &amp;quot;CREATE TABLE ceremonies (id integer PRIMARY KEY,Year integer,Host text);&amp;quot;
----&amp;gt; 2 conn.execute(create_ceremonies)
      3
      4


OperationalError: table ceremonies already exists
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;insert_query = &amp;quot;INSERT INTO ceremonies (Year, Host) VALUES (?,?);&amp;quot;
conn.executemany(insert_query, years_hosts)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
print(conn.execute(&amp;quot;select * from ceremonies limit 10;&amp;quot;).fetchall())
print(conn.execute(&amp;quot;pragma table_info(ceremonies);&amp;quot;).fetchall())
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;foreign-key-constraints-1&#34;&gt;Foreign Key Constraints&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;q_keys_on = &amp;quot;PRAGMA foreign_keys = ON;&amp;quot;
conn.execute(q_keys_on)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;setting-up-one-to-many-1&#34;&gt;Setting Up One-To-Many&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Lets create the nominations_two table

q_create_nom_2 = &#39;&#39;&#39;CREATE TABLE nomination_two(
id integer PRIMERY KEY,
category text,
nominee text,
movie text,
character text,
won text,
ceremony_id integer,
FOREIGN KEY(ceremony_id) REFERENCES ceremonies(id)
);&#39;&#39;&#39;

nom_query = &#39;&#39;&#39;
select ceremonies.id as ceremony_id, nominations.category as category,
nominations.nominee as nominee, nominations.movie as movie,
nominations.character as character, nominations.won as won
from nominations
inner join ceremonies
on nominations.year == ceremonies.year
;
&#39;&#39;&#39;

joined_nominations = conn.execute(nom_query).fetchall()

conn.execute(q_create_nom_2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;OperationalErrorTraceback (most recent call last)

&amp;lt;ipython-input-14-98e7efc5b2ba&amp;gt; in &amp;lt;module&amp;gt;()
     24 joined_nominations = conn.execute(nom_query).fetchall()
     25
---&amp;gt; 26 conn.execute(q_create_nom_2)


OperationalError: table nomination_two already exists
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;insert_nominations_two = &#39;&#39;&#39;insert into nomination_two (ceremony_id, category, nominee, movie, character, won)
values (?,?,?,?,?,?);
&#39;&#39;&#39;

conn.executemany(insert_nominations_two, joined_nominations)
print(conn.execute(&amp;quot;select * from nomination_two limit 5;&amp;quot;).fetchall())
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[(None, &#39;Actor -- Leading Role&#39;, &#39;Javier Bardem&#39;, &#39;Biutiful&#39;, &#39;Uxbal&#39;, &#39;0&#39;, 1), (None, &#39;Actor -- Leading Role&#39;, &#39;Jeff Bridges&#39;, &#39;True Grit&#39;, &#39;Rooster Cogburn&#39;, &#39;0&#39;, 1), (None, &#39;Actor -- Leading Role&#39;, &#39;Jesse Eisenberg&#39;, &#39;The Social Network&#39;, &#39;Mark Zuckerberg&#39;, &#39;0&#39;, 1), (None, &#39;Actor -- Leading Role&#39;, &#39;Colin Firth&#39;, &amp;quot;The King&#39;s Speech&amp;quot;, &#39;King George VI&#39;, &#39;1&#39;, 1), (None, &#39;Actor -- Leading Role&#39;, &#39;James Franco&#39;, &#39;127 Hours&#39;, &#39;Aron Ralston&#39;, &#39;0&#39;, 1)]
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;deleting-and-renaming-tables-1&#34;&gt;Deleting And Renaming Tables&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;delete_nom =&amp;quot;DROP TABLE nominations;&amp;quot;
conn.execute(delete_nom)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;sqlite3.Cursor at 0x7fd32899c810&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;rename_nom = &amp;quot;ALTER TABLE nomination_two RENAME TO nominations;&amp;quot;
conn.execute(rename_nom)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;sqlite3.Cursor at 0x7fd32899cea0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;creating-a-join-table-1&#34;&gt;Creating A Join Table&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;create_movies = &amp;quot;create table movies (id integer primary key,movie text);&amp;quot;
create_actors = &amp;quot;create table actors (id integer primary key,actor text);&amp;quot;
create_movies_actors = &#39;&#39;&#39;create table movies_actors (id INTEGER PRIMARY KEY,
movie_id INTEGER, actor_id INTEGER,
FOREIGN KEY(movie_id) references movies(id),
FOREIGN KEY(actor_id) references actors(id));
&#39;&#39;&#39;
conn.execute(create_movies)
conn.execute(create_actors)
conn.execute(create_movies_actors)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;OperationalErrorTraceback (most recent call last)

&amp;lt;ipython-input-39-a3f61fdfe730&amp;gt; in &amp;lt;module&amp;gt;()
      6 FOREIGN KEY(actor_id) references actors(id));
      7 &#39;&#39;&#39;
----&amp;gt; 8 conn.execute(create_movies)
      9 conn.execute(create_actors)
     10 conn.execute(create_movies_actors)


OperationalError: table movies already exists
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(conn.execute(&amp;quot;select * from actors limit 5&amp;quot;).fetchall())
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[(1, &#39;Javier Bardem&#39;), (2, &#39;Jeff Bridges&#39;), (3, &#39;Jesse Eisenberg&#39;), (4, &#39;Colin Firth&#39;), (5, &#39;James Franco&#39;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;insert_movies = &amp;quot;insert into movies (movie) select distinct movie from nominations;&amp;quot;
insert_actors = &amp;quot;insert into actors (actor) select distinct nominee from nominations;&amp;quot;
conn.execute(insert_movies)
conn.execute(insert_actors)

print(conn.execute(&amp;quot;select * from movies limit 5;&amp;quot;).fetchall())
print(conn.execute(&amp;quot;select * from actors limit 5;&amp;quot;).fetchall())
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[(1, &#39;Biutiful&#39;), (2, &#39;True Grit&#39;), (3, &#39;The Social Network&#39;), (4, &amp;quot;The King&#39;s Speech&amp;quot;), (5, &#39;127 Hours&#39;)]
[(1, &#39;Javier Bardem&#39;), (2, &#39;Jeff Bridges&#39;), (3, &#39;Jesse Eisenberg&#39;), (4, &#39;Colin Firth&#39;), (5, &#39;James Franco&#39;)]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Predicting Board Games Reviews, Custers, Correlations and choosing an Error. </title>
      <link>https://coderhook-ml.firebaseapp.com/project/board_games_reviews_predictions/</link>
      <pubDate>Thu, 27 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coderhook-ml.firebaseapp.com/project/board_games_reviews_predictions/</guid>
      <description>

&lt;h1 id=&#34;predicting-board-games-reviews&#34;&gt;Predicting Board Games Reviews&lt;/h1&gt;

&lt;h3 id=&#34;in-this-project-we-are-going-to-first-see-how-to-pick-a-metric-error-for-our-model-we-are-going-to-work-with-clusters-and-check-for-correlations-and-finally-we-will-create-a-model-for-our-predictions&#34;&gt;In this project we are going to first, see how to pick a metric error for our model, we are going to work with clusters and check for correlations, and finally we will create a model for our predictions.&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import csv

board_games = pd.read_csv(&amp;quot;board_games.csv&amp;quot;)
board_games.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style&gt;
    .dataframe thead tr:only-child th {
        text-align: right;
    }

    .dataframe thead th {
        text-align: left;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;yearpublished&lt;/th&gt;
      &lt;th&gt;minplayers&lt;/th&gt;
      &lt;th&gt;maxplayers&lt;/th&gt;
      &lt;th&gt;playingtime&lt;/th&gt;
      &lt;th&gt;minplaytime&lt;/th&gt;
      &lt;th&gt;maxplaytime&lt;/th&gt;
      &lt;th&gt;minage&lt;/th&gt;
      &lt;th&gt;users_rated&lt;/th&gt;
      &lt;th&gt;average_rating&lt;/th&gt;
      &lt;th&gt;bayes_average_rating&lt;/th&gt;
      &lt;th&gt;total_owners&lt;/th&gt;
      &lt;th&gt;total_traders&lt;/th&gt;
      &lt;th&gt;total_wanters&lt;/th&gt;
      &lt;th&gt;total_wishers&lt;/th&gt;
      &lt;th&gt;total_comments&lt;/th&gt;
      &lt;th&gt;total_weights&lt;/th&gt;
      &lt;th&gt;average_weight&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;12333&lt;/td&gt;
      &lt;td&gt;boardgame&lt;/td&gt;
      &lt;td&gt;Twilight Struggle&lt;/td&gt;
      &lt;td&gt;2005.0&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;180.0&lt;/td&gt;
      &lt;td&gt;180.0&lt;/td&gt;
      &lt;td&gt;180.0&lt;/td&gt;
      &lt;td&gt;13.0&lt;/td&gt;
      &lt;td&gt;20113&lt;/td&gt;
      &lt;td&gt;8.33774&lt;/td&gt;
      &lt;td&gt;8.22186&lt;/td&gt;
      &lt;td&gt;26647&lt;/td&gt;
      &lt;td&gt;372&lt;/td&gt;
      &lt;td&gt;1219&lt;/td&gt;
      &lt;td&gt;5865&lt;/td&gt;
      &lt;td&gt;5347&lt;/td&gt;
      &lt;td&gt;2562&lt;/td&gt;
      &lt;td&gt;3.4785&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;120677&lt;/td&gt;
      &lt;td&gt;boardgame&lt;/td&gt;
      &lt;td&gt;Terra Mystica&lt;/td&gt;
      &lt;td&gt;2012.0&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;150.0&lt;/td&gt;
      &lt;td&gt;60.0&lt;/td&gt;
      &lt;td&gt;150.0&lt;/td&gt;
      &lt;td&gt;12.0&lt;/td&gt;
      &lt;td&gt;14383&lt;/td&gt;
      &lt;td&gt;8.28798&lt;/td&gt;
      &lt;td&gt;8.14232&lt;/td&gt;
      &lt;td&gt;16519&lt;/td&gt;
      &lt;td&gt;132&lt;/td&gt;
      &lt;td&gt;1586&lt;/td&gt;
      &lt;td&gt;6277&lt;/td&gt;
      &lt;td&gt;2526&lt;/td&gt;
      &lt;td&gt;1423&lt;/td&gt;
      &lt;td&gt;3.8939&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;102794&lt;/td&gt;
      &lt;td&gt;boardgame&lt;/td&gt;
      &lt;td&gt;Caverna: The Cave Farmers&lt;/td&gt;
      &lt;td&gt;2013.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;7.0&lt;/td&gt;
      &lt;td&gt;210.0&lt;/td&gt;
      &lt;td&gt;30.0&lt;/td&gt;
      &lt;td&gt;210.0&lt;/td&gt;
      &lt;td&gt;12.0&lt;/td&gt;
      &lt;td&gt;9262&lt;/td&gt;
      &lt;td&gt;8.28994&lt;/td&gt;
      &lt;td&gt;8.06886&lt;/td&gt;
      &lt;td&gt;12230&lt;/td&gt;
      &lt;td&gt;99&lt;/td&gt;
      &lt;td&gt;1476&lt;/td&gt;
      &lt;td&gt;5600&lt;/td&gt;
      &lt;td&gt;1700&lt;/td&gt;
      &lt;td&gt;777&lt;/td&gt;
      &lt;td&gt;3.7761&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;25613&lt;/td&gt;
      &lt;td&gt;boardgame&lt;/td&gt;
      &lt;td&gt;Through the Ages: A Story of Civilization&lt;/td&gt;
      &lt;td&gt;2006.0&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;4.0&lt;/td&gt;
      &lt;td&gt;240.0&lt;/td&gt;
      &lt;td&gt;240.0&lt;/td&gt;
      &lt;td&gt;240.0&lt;/td&gt;
      &lt;td&gt;12.0&lt;/td&gt;
      &lt;td&gt;13294&lt;/td&gt;
      &lt;td&gt;8.20407&lt;/td&gt;
      &lt;td&gt;8.05804&lt;/td&gt;
      &lt;td&gt;14343&lt;/td&gt;
      &lt;td&gt;362&lt;/td&gt;
      &lt;td&gt;1084&lt;/td&gt;
      &lt;td&gt;5075&lt;/td&gt;
      &lt;td&gt;3378&lt;/td&gt;
      &lt;td&gt;1642&lt;/td&gt;
      &lt;td&gt;4.1590&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;3076&lt;/td&gt;
      &lt;td&gt;boardgame&lt;/td&gt;
      &lt;td&gt;Puerto Rico&lt;/td&gt;
      &lt;td&gt;2002.0&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;150.0&lt;/td&gt;
      &lt;td&gt;90.0&lt;/td&gt;
      &lt;td&gt;150.0&lt;/td&gt;
      &lt;td&gt;12.0&lt;/td&gt;
      &lt;td&gt;39883&lt;/td&gt;
      &lt;td&gt;8.14261&lt;/td&gt;
      &lt;td&gt;8.04524&lt;/td&gt;
      &lt;td&gt;44362&lt;/td&gt;
      &lt;td&gt;795&lt;/td&gt;
      &lt;td&gt;861&lt;/td&gt;
      &lt;td&gt;5414&lt;/td&gt;
      &lt;td&gt;9173&lt;/td&gt;
      &lt;td&gt;5213&lt;/td&gt;
      &lt;td&gt;3.2943&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;board_games.shape
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(81312, 20)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;board_games = board_games.dropna(axis=0)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;board_games.shape
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(81268, 20)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;board_games = board_games[board_games[&#39;users_rated&#39;] &amp;gt; 0]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;board_games.shape
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(56894, 20)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;# Picking An Error Metric&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
%matplotlib inline

plt.hist(board_games[&#39;average_rating&#39;])
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://coderhook-ml.firebaseapp.com/img/ds/board_review/output_8_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.boxplot(board_games[&#39;average_rating&#39;])
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://coderhook-ml.firebaseapp.com/img/ds/board_review/output_9_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(board_games[&#39;average_rating&#39;].std())
print(board_games[&#39;average_rating&#39;].mean())
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1.57882993483
6.01611284933
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AS the data is continous using mean square error makes sense.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;But it is not the only possibility, as it is a linear regression and we want to meassure the distance between the actual value and the predicted one, we can also use, mean square and mean median errors.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;DEFINETLY NOT to use AUC or any other classification error metric cause this is not the case we are going to work in.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;plotting-clusters&#34;&gt;Plotting Clusters&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn.cluster import KMeans
import numpy as np

kmeans = KMeans(n_clusters = 5)

numeric_columns = board_games.iloc[:, 3:]
numeric_columns.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style&gt;
    .dataframe thead tr:only-child th {
        text-align: right;
    }

    .dataframe thead th {
        text-align: left;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;yearpublished&lt;/th&gt;
      &lt;th&gt;minplayers&lt;/th&gt;
      &lt;th&gt;maxplayers&lt;/th&gt;
      &lt;th&gt;playingtime&lt;/th&gt;
      &lt;th&gt;minplaytime&lt;/th&gt;
      &lt;th&gt;maxplaytime&lt;/th&gt;
      &lt;th&gt;minage&lt;/th&gt;
      &lt;th&gt;users_rated&lt;/th&gt;
      &lt;th&gt;average_rating&lt;/th&gt;
      &lt;th&gt;bayes_average_rating&lt;/th&gt;
      &lt;th&gt;total_owners&lt;/th&gt;
      &lt;th&gt;total_traders&lt;/th&gt;
      &lt;th&gt;total_wanters&lt;/th&gt;
      &lt;th&gt;total_wishers&lt;/th&gt;
      &lt;th&gt;total_comments&lt;/th&gt;
      &lt;th&gt;total_weights&lt;/th&gt;
      &lt;th&gt;average_weight&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2005.0&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;180.0&lt;/td&gt;
      &lt;td&gt;180.0&lt;/td&gt;
      &lt;td&gt;180.0&lt;/td&gt;
      &lt;td&gt;13.0&lt;/td&gt;
      &lt;td&gt;20113&lt;/td&gt;
      &lt;td&gt;8.33774&lt;/td&gt;
      &lt;td&gt;8.22186&lt;/td&gt;
      &lt;td&gt;26647&lt;/td&gt;
      &lt;td&gt;372&lt;/td&gt;
      &lt;td&gt;1219&lt;/td&gt;
      &lt;td&gt;5865&lt;/td&gt;
      &lt;td&gt;5347&lt;/td&gt;
      &lt;td&gt;2562&lt;/td&gt;
      &lt;td&gt;3.4785&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2012.0&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;150.0&lt;/td&gt;
      &lt;td&gt;60.0&lt;/td&gt;
      &lt;td&gt;150.0&lt;/td&gt;
      &lt;td&gt;12.0&lt;/td&gt;
      &lt;td&gt;14383&lt;/td&gt;
      &lt;td&gt;8.28798&lt;/td&gt;
      &lt;td&gt;8.14232&lt;/td&gt;
      &lt;td&gt;16519&lt;/td&gt;
      &lt;td&gt;132&lt;/td&gt;
      &lt;td&gt;1586&lt;/td&gt;
      &lt;td&gt;6277&lt;/td&gt;
      &lt;td&gt;2526&lt;/td&gt;
      &lt;td&gt;1423&lt;/td&gt;
      &lt;td&gt;3.8939&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2013.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;7.0&lt;/td&gt;
      &lt;td&gt;210.0&lt;/td&gt;
      &lt;td&gt;30.0&lt;/td&gt;
      &lt;td&gt;210.0&lt;/td&gt;
      &lt;td&gt;12.0&lt;/td&gt;
      &lt;td&gt;9262&lt;/td&gt;
      &lt;td&gt;8.28994&lt;/td&gt;
      &lt;td&gt;8.06886&lt;/td&gt;
      &lt;td&gt;12230&lt;/td&gt;
      &lt;td&gt;99&lt;/td&gt;
      &lt;td&gt;1476&lt;/td&gt;
      &lt;td&gt;5600&lt;/td&gt;
      &lt;td&gt;1700&lt;/td&gt;
      &lt;td&gt;777&lt;/td&gt;
      &lt;td&gt;3.7761&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2006.0&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;4.0&lt;/td&gt;
      &lt;td&gt;240.0&lt;/td&gt;
      &lt;td&gt;240.0&lt;/td&gt;
      &lt;td&gt;240.0&lt;/td&gt;
      &lt;td&gt;12.0&lt;/td&gt;
      &lt;td&gt;13294&lt;/td&gt;
      &lt;td&gt;8.20407&lt;/td&gt;
      &lt;td&gt;8.05804&lt;/td&gt;
      &lt;td&gt;14343&lt;/td&gt;
      &lt;td&gt;362&lt;/td&gt;
      &lt;td&gt;1084&lt;/td&gt;
      &lt;td&gt;5075&lt;/td&gt;
      &lt;td&gt;3378&lt;/td&gt;
      &lt;td&gt;1642&lt;/td&gt;
      &lt;td&gt;4.1590&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2002.0&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;150.0&lt;/td&gt;
      &lt;td&gt;90.0&lt;/td&gt;
      &lt;td&gt;150.0&lt;/td&gt;
      &lt;td&gt;12.0&lt;/td&gt;
      &lt;td&gt;39883&lt;/td&gt;
      &lt;td&gt;8.14261&lt;/td&gt;
      &lt;td&gt;8.04524&lt;/td&gt;
      &lt;td&gt;44362&lt;/td&gt;
      &lt;td&gt;795&lt;/td&gt;
      &lt;td&gt;861&lt;/td&gt;
      &lt;td&gt;5414&lt;/td&gt;
      &lt;td&gt;9173&lt;/td&gt;
      &lt;td&gt;5213&lt;/td&gt;
      &lt;td&gt;3.2943&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;kmeans.fit(numeric_columns)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;KMeans(copy_x=True, init=&#39;k-means++&#39;, max_iter=300, n_clusters=5, n_init=10,
    n_jobs=1, precompute_distances=&#39;auto&#39;, random_state=None, tol=0.0001,
    verbose=0)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;labels = kmeans.labels_
print(labels)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1 1 1 ..., 0 0 0]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;game_mean = numeric_columns.apply(np.mean, axis = 1)
game_mean.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0    3806.296359
1    2662.195541
2    1979.243229
3    2467.201242
4    6360.675421
dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;game_std = numeric_columns.apply(np.std, axis = 1)

plt.scatter(x=game_mean, y=game_std, c=game_std)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://coderhook-ml.firebaseapp.com/img/ds/board_review/output_17_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;results&#34;&gt;Results:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;- We can see that there are few games that are played by a lot of players. Most games dont get played that much but a few get plaed by a lot of players.
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;finding-correlations&#34;&gt;Finding Correlations&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;correlations = numeric_columns.corr()

correlations[&#39;average_rating&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;yearpublished           0.108461
minplayers             -0.032701
maxplayers             -0.008335
playingtime             0.048994
minplaytime             0.043985
maxplaytime             0.048994
minage                  0.210049
users_rated             0.112564
average_rating          1.000000
bayes_average_rating    0.231563
total_owners            0.137478
total_traders           0.119452
total_wanters           0.196566
total_wishers           0.171375
total_comments          0.123714
total_weights           0.109691
average_weight          0.351081
Name: average_rating, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;We can see that average_weight is highly correlated with average_rating, also, yearspublished has a good correlation which indicates that new games get better ratings. Another example is minage, as it is bigger has more rating.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cols_dont_corr = list(numeric_columns.columns)
cols_dont_corr.remove(&#39;bayes_average_rating&#39;)
cols_dont_corr.remove(&#39;average_rating&#39;)
# This columns are eliminated because seems that they do not correlate with average_rating

corr_cols = cols_dont_corr

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;creating-a-model&#34;&gt;Creating A Model&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Lets create a linear regression model and make some predictions about the  data.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn.linear_model import LinearRegression

lr = LinearRegression()
lr.fit(board_games[corr_cols], board_games[&#39;average_rating&#39;])
predictions = lr.predict(board_games[corr_cols])

mse = np.mean((predictions - board_games[&#39;average_rating&#39;]) ** 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(mse)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2.09339697583
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Our ERROR here is very close to the standard deviation, which means that our model does not predict well.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Preparing the data to use it in a mySQL database.</title>
      <link>https://coderhook-ml.firebaseapp.com/project/project_prep_sql/</link>
      <pubDate>Thu, 27 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coderhook-ml.firebaseapp.com/project/project_prep_sql/</guid>
      <description>

&lt;h1 id=&#34;preparing-data-to-use-it-in-a-mysql-database&#34;&gt;Preparing Data to use it in a mySQL database&lt;/h1&gt;

&lt;h4 id=&#34;in-this-project-we-are-going-to-preapare-and-serve-the-data-into-a-mysql-database&#34;&gt;In this project we are going to preapare and serve the data into a mySQL database.&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd

df = pd.read_csv(&amp;quot;academy_awards.csv&amp;quot;, encoding=&amp;quot;ISO-8859-1&amp;quot;)
df
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style&gt;
    .dataframe thead tr:only-child th {
        text-align: right;
    }

    .dataframe thead th {
        text-align: left;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Year&lt;/th&gt;
      &lt;th&gt;Category&lt;/th&gt;
      &lt;th&gt;Nominee&lt;/th&gt;
      &lt;th&gt;Additional Info&lt;/th&gt;
      &lt;th&gt;Won?&lt;/th&gt;
      &lt;th&gt;Unnamed: 5&lt;/th&gt;
      &lt;th&gt;Unnamed: 6&lt;/th&gt;
      &lt;th&gt;Unnamed: 7&lt;/th&gt;
      &lt;th&gt;Unnamed: 8&lt;/th&gt;
      &lt;th&gt;Unnamed: 9&lt;/th&gt;
      &lt;th&gt;Unnamed: 10&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2010 (83rd)&lt;/td&gt;
      &lt;td&gt;Actor -- Leading Role&lt;/td&gt;
      &lt;td&gt;Javier Bardem&lt;/td&gt;
      &lt;td&gt;Biutiful {&#39;Uxbal&#39;}&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2010 (83rd)&lt;/td&gt;
      &lt;td&gt;Actor -- Leading Role&lt;/td&gt;
      &lt;td&gt;Jeff Bridges&lt;/td&gt;
      &lt;td&gt;True Grit {&#39;Rooster Cogburn&#39;}&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2010 (83rd)&lt;/td&gt;
      &lt;td&gt;Actor -- Leading Role&lt;/td&gt;
      &lt;td&gt;Jesse Eisenberg&lt;/td&gt;
      &lt;td&gt;The Social Network {&#39;Mark Zuckerberg&#39;}&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2010 (83rd)&lt;/td&gt;
      &lt;td&gt;Actor -- Leading Role&lt;/td&gt;
      &lt;td&gt;Colin Firth&lt;/td&gt;
      &lt;td&gt;The King&#39;s Speech {&#39;King George VI&#39;}&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2010 (83rd)&lt;/td&gt;
      &lt;td&gt;Actor -- Leading Role&lt;/td&gt;
      &lt;td&gt;James Franco&lt;/td&gt;
      &lt;td&gt;127 Hours {&#39;Aron Ralston&#39;}&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;2010 (83rd)&lt;/td&gt;
      &lt;td&gt;Actor -- Supporting Role&lt;/td&gt;
      &lt;td&gt;Christian Bale&lt;/td&gt;
      &lt;td&gt;The Fighter {&#39;Dicky Eklund&#39;}&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;2010 (83rd)&lt;/td&gt;
      &lt;td&gt;Actor -- Supporting Role&lt;/td&gt;
      &lt;td&gt;John Hawkes&lt;/td&gt;
      &lt;td&gt;Winter&#39;s Bone {&#39;Teardrop&#39;}&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;2010 (83rd)&lt;/td&gt;
      &lt;td&gt;Actor -- Supporting Role&lt;/td&gt;
      &lt;td&gt;Jeremy Renner&lt;/td&gt;
      &lt;td&gt;The Town {&#39;James Coughlin&#39;}&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;2010 (83rd)&lt;/td&gt;
      &lt;td&gt;Actor -- Supporting Role&lt;/td&gt;
      &lt;td&gt;Mark Ruffalo&lt;/td&gt;
      &lt;td&gt;The Kids Are All Right {&#39;Paul&#39;}&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;2010 (83rd)&lt;/td&gt;
      &lt;td&gt;Actor -- Supporting Role&lt;/td&gt;
      &lt;td&gt;Geoffrey Rush&lt;/td&gt;
      &lt;td&gt;The King&#39;s Speech {&#39;Lionel Logue&#39;}&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10&lt;/th&gt;
      &lt;td&gt;2010 (83rd)&lt;/td&gt;
      &lt;td&gt;Actress -- Leading Role&lt;/td&gt;
      &lt;td&gt;Annette Bening&lt;/td&gt;
      &lt;td&gt;The Kids Are All Right {&#39;Nic&#39;}&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;11&lt;/th&gt;
      &lt;td&gt;2010 (83rd)&lt;/td&gt;
      &lt;td&gt;Actress -- Leading Role&lt;/td&gt;
      &lt;td&gt;Nicole Kidman&lt;/td&gt;
      &lt;td&gt;Rabbit Hole {&#39;Becca&#39;}&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12&lt;/th&gt;
      &lt;td&gt;2010 (83rd)&lt;/td&gt;
      &lt;td&gt;Actress -- Leading Role&lt;/td&gt;
      &lt;td&gt;Jennifer Lawrence&lt;/td&gt;
      &lt;td&gt;Winter&#39;s Bone {&#39;Ree&#39;}&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;13&lt;/th&gt;
      &lt;td&gt;2010 (83rd)&lt;/td&gt;
      &lt;td&gt;Actress -- Leading Role&lt;/td&gt;
      &lt;td&gt;Natalie Portman&lt;/td&gt;
      &lt;td&gt;Black Swan {&#39;Nina Sayers/The Swan Queen&#39;}&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;14&lt;/th&gt;
      &lt;td&gt;2010 (83rd)&lt;/td&gt;
      &lt;td&gt;Actress -- Leading Role&lt;/td&gt;
      &lt;td&gt;Michelle Williams&lt;/td&gt;
      &lt;td&gt;Blue Valentine {&#39;Cindy&#39;}&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;15&lt;/th&gt;
      &lt;td&gt;2010 (83rd)&lt;/td&gt;
      &lt;td&gt;Actress -- Supporting Role&lt;/td&gt;
      &lt;td&gt;Amy Adams&lt;/td&gt;
      &lt;td&gt;The Fighter {&#39;Charlene Fleming&#39;}&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;16&lt;/th&gt;
      &lt;td&gt;2010 (83rd)&lt;/td&gt;
      &lt;td&gt;Actress -- Supporting Role&lt;/td&gt;
      &lt;td&gt;Helena Bonham Carter&lt;/td&gt;
      &lt;td&gt;The King&#39;s Speech {&#39;Queen Elizabeth&#39;}&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;17&lt;/th&gt;
      &lt;td&gt;2010 (83rd)&lt;/td&gt;
      &lt;td&gt;Actress -- Supporting Role&lt;/td&gt;
      &lt;td&gt;Melissa Leo&lt;/td&gt;
      &lt;td&gt;The Fighter {&#39;Alice Ward&#39;}&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;18&lt;/th&gt;
      &lt;td&gt;2010 (83rd)&lt;/td&gt;
      &lt;td&gt;Actress -- Supporting Role&lt;/td&gt;
      &lt;td&gt;Hailee Steinfeld&lt;/td&gt;
      &lt;td&gt;True Grit {&#39;Mattie Ross&#39;}&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;19&lt;/th&gt;
      &lt;td&gt;2010 (83rd)&lt;/td&gt;
      &lt;td&gt;Actress -- Supporting Role&lt;/td&gt;
      &lt;td&gt;Jacki Weaver&lt;/td&gt;
      &lt;td&gt;Animal Kingdom {&#39;Janine &#39;Smurf&#39; Cody&#39;}&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;20&lt;/th&gt;
      &lt;td&gt;2010 (83rd)&lt;/td&gt;
      &lt;td&gt;Animated Feature Film&lt;/td&gt;
      &lt;td&gt;How to Train Your Dragon&lt;/td&gt;
      &lt;td&gt;Chris Sanders and Dean DeBlois&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;21&lt;/th&gt;
      &lt;td&gt;2010 (83rd)&lt;/td&gt;
      &lt;td&gt;Animated Feature Film&lt;/td&gt;
      &lt;td&gt;The Illusionist&lt;/td&gt;
      &lt;td&gt;Sylvain Chomet&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;22&lt;/th&gt;
      &lt;td&gt;2010 (83rd)&lt;/td&gt;
      &lt;td&gt;Animated Feature Film&lt;/td&gt;
      &lt;td&gt;Toy Story 3&lt;/td&gt;
      &lt;td&gt;Lee Unkrich&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;23&lt;/th&gt;
      &lt;td&gt;2010 (83rd)&lt;/td&gt;
      &lt;td&gt;Art Direction&lt;/td&gt;
      &lt;td&gt;Alice in Wonderland&lt;/td&gt;
      &lt;td&gt;Production Design: Robert Stromberg; Set Decor...&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;24&lt;/th&gt;
      &lt;td&gt;2010 (83rd)&lt;/td&gt;
      &lt;td&gt;Art Direction&lt;/td&gt;
      &lt;td&gt;Harry Potter and the Deathly Hallows Part 1&lt;/td&gt;
      &lt;td&gt;Production Design: Stuart Craig; Set Decoratio...&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;25&lt;/th&gt;
      &lt;td&gt;2010 (83rd)&lt;/td&gt;
      &lt;td&gt;Art Direction&lt;/td&gt;
      &lt;td&gt;Inception&lt;/td&gt;
      &lt;td&gt;Production Design: Guy Hendrix Dyas; Set Decor...&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;26&lt;/th&gt;
      &lt;td&gt;2010 (83rd)&lt;/td&gt;
      &lt;td&gt;Art Direction&lt;/td&gt;
      &lt;td&gt;The King&#39;s Speech&lt;/td&gt;
      &lt;td&gt;Production Design: Eve Stewart; Set Decoration...&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;27&lt;/th&gt;
      &lt;td&gt;2010 (83rd)&lt;/td&gt;
      &lt;td&gt;Art Direction&lt;/td&gt;
      &lt;td&gt;True Grit&lt;/td&gt;
      &lt;td&gt;Production Design: Jess Gonchor; Set Decoratio...&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;28&lt;/th&gt;
      &lt;td&gt;2010 (83rd)&lt;/td&gt;
      &lt;td&gt;Cinematography&lt;/td&gt;
      &lt;td&gt;Black Swan&lt;/td&gt;
      &lt;td&gt;Matthew Libatique&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;29&lt;/th&gt;
      &lt;td&gt;2010 (83rd)&lt;/td&gt;
      &lt;td&gt;Cinematography&lt;/td&gt;
      &lt;td&gt;Inception&lt;/td&gt;
      &lt;td&gt;Wally Pfister&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10107&lt;/th&gt;
      &lt;td&gt;1927/28 (1st)&lt;/td&gt;
      &lt;td&gt;Art Direction&lt;/td&gt;
      &lt;td&gt;Harry Oliver&lt;/td&gt;
      &lt;td&gt;7th Heaven&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10108&lt;/th&gt;
      &lt;td&gt;1927/28 (1st)&lt;/td&gt;
      &lt;td&gt;Cinematography&lt;/td&gt;
      &lt;td&gt;George Barnes&lt;/td&gt;
      &lt;td&gt;The Devil Dancer; The Magic Flame; and Sadie T...&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10109&lt;/th&gt;
      &lt;td&gt;1927/28 (1st)&lt;/td&gt;
      &lt;td&gt;Cinematography&lt;/td&gt;
      &lt;td&gt;Charles Rosher&lt;/td&gt;
      &lt;td&gt;Sunrise&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10110&lt;/th&gt;
      &lt;td&gt;1927/28 (1st)&lt;/td&gt;
      &lt;td&gt;Cinematography&lt;/td&gt;
      &lt;td&gt;Karl Struss&lt;/td&gt;
      &lt;td&gt;Sunrise&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10111&lt;/th&gt;
      &lt;td&gt;1927/28 (1st)&lt;/td&gt;
      &lt;td&gt;Directing&lt;/td&gt;
      &lt;td&gt;Lewis Milestone&lt;/td&gt;
      &lt;td&gt;Two Arabian Knights&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10112&lt;/th&gt;
      &lt;td&gt;1927/28 (1st)&lt;/td&gt;
      &lt;td&gt;Directing&lt;/td&gt;
      &lt;td&gt;Ted Wilde&lt;/td&gt;
      &lt;td&gt;Speedy&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10113&lt;/th&gt;
      &lt;td&gt;1927/28 (1st)&lt;/td&gt;
      &lt;td&gt;Directing&lt;/td&gt;
      &lt;td&gt;Frank Borzage&lt;/td&gt;
      &lt;td&gt;7th Heaven&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10114&lt;/th&gt;
      &lt;td&gt;1927/28 (1st)&lt;/td&gt;
      &lt;td&gt;Directing&lt;/td&gt;
      &lt;td&gt;Herbert Brenon&lt;/td&gt;
      &lt;td&gt;Sorrell and Son&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10115&lt;/th&gt;
      &lt;td&gt;1927/28 (1st)&lt;/td&gt;
      &lt;td&gt;Directing&lt;/td&gt;
      &lt;td&gt;King Vidor&lt;/td&gt;
      &lt;td&gt;The Crowd&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10116&lt;/th&gt;
      &lt;td&gt;1927/28 (1st)&lt;/td&gt;
      &lt;td&gt;Directing&lt;/td&gt;
      &lt;td&gt;To Charles Chaplin, for acting, writing, direc...&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10117&lt;/th&gt;
      &lt;td&gt;1927/28 (1st)&lt;/td&gt;
      &lt;td&gt;Best Picture&lt;/td&gt;
      &lt;td&gt;The Caddo Company&lt;/td&gt;
      &lt;td&gt;The Racket&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10118&lt;/th&gt;
      &lt;td&gt;1927/28 (1st)&lt;/td&gt;
      &lt;td&gt;Best Picture&lt;/td&gt;
      &lt;td&gt;Fox&lt;/td&gt;
      &lt;td&gt;7th Heaven&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10119&lt;/th&gt;
      &lt;td&gt;1927/28 (1st)&lt;/td&gt;
      &lt;td&gt;Best Picture&lt;/td&gt;
      &lt;td&gt;Paramount Famous Lasky&lt;/td&gt;
      &lt;td&gt;Wings&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10120&lt;/th&gt;
      &lt;td&gt;1927/28 (1st)&lt;/td&gt;
      &lt;td&gt;Writing&lt;/td&gt;
      &lt;td&gt;Alfred Cohn&lt;/td&gt;
      &lt;td&gt;The Jazz Singer&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10121&lt;/th&gt;
      &lt;td&gt;1927/28 (1st)&lt;/td&gt;
      &lt;td&gt;Writing&lt;/td&gt;
      &lt;td&gt;Anthony Coldeway&lt;/td&gt;
      &lt;td&gt;Glorious Betsy&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10122&lt;/th&gt;
      &lt;td&gt;1927/28 (1st)&lt;/td&gt;
      &lt;td&gt;Writing&lt;/td&gt;
      &lt;td&gt;Benjamin Glazer&lt;/td&gt;
      &lt;td&gt;7th Heaven&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10123&lt;/th&gt;
      &lt;td&gt;1927/28 (1st)&lt;/td&gt;
      &lt;td&gt;Writing&lt;/td&gt;
      &lt;td&gt;Lajos Biro&lt;/td&gt;
      &lt;td&gt;The Last Command&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10124&lt;/th&gt;
      &lt;td&gt;1927/28 (1st)&lt;/td&gt;
      &lt;td&gt;Writing&lt;/td&gt;
      &lt;td&gt;Ben Hecht&lt;/td&gt;
      &lt;td&gt;Underworld&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10125&lt;/th&gt;
      &lt;td&gt;1927/28 (1st)&lt;/td&gt;
      &lt;td&gt;Writing&lt;/td&gt;
      &lt;td&gt;Gerald Duffy&lt;/td&gt;
      &lt;td&gt;The Private Life of Helen of Troy&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10126&lt;/th&gt;
      &lt;td&gt;1927/28 (1st)&lt;/td&gt;
      &lt;td&gt;Writing&lt;/td&gt;
      &lt;td&gt;Joseph Farnham[NOTE: This award was not associ...&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10127&lt;/th&gt;
      &lt;td&gt;1927/28 (1st)&lt;/td&gt;
      &lt;td&gt;Writing&lt;/td&gt;
      &lt;td&gt;George Marion, Jr.[NOTE: This nomination was n...&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10128&lt;/th&gt;
      &lt;td&gt;1927/28 (1st)&lt;/td&gt;
      &lt;td&gt;Writing&lt;/td&gt;
      &lt;td&gt;To Charles Chaplin, for acting, writing, direc...&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10129&lt;/th&gt;
      &lt;td&gt;1927/28 (1st)&lt;/td&gt;
      &lt;td&gt;Honorary Award&lt;/td&gt;
      &lt;td&gt;To Warner Bros., for producing The Jazz Singer...&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10130&lt;/th&gt;
      &lt;td&gt;1927/28 (1st)&lt;/td&gt;
      &lt;td&gt;Honorary Award&lt;/td&gt;
      &lt;td&gt;To Charles Chaplin, for acting, writing, direc...&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10131&lt;/th&gt;
      &lt;td&gt;1927/28 (1st)&lt;/td&gt;
      &lt;td&gt;Engineering Effects (archaic category)&lt;/td&gt;
      &lt;td&gt;Ralph Hammeras [NOTE: This nomination was not ...&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10132&lt;/th&gt;
      &lt;td&gt;1927/28 (1st)&lt;/td&gt;
      &lt;td&gt;Engineering Effects (archaic category)&lt;/td&gt;
      &lt;td&gt;Roy Pomeroy&lt;/td&gt;
      &lt;td&gt;Wings&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10133&lt;/th&gt;
      &lt;td&gt;1927/28 (1st)&lt;/td&gt;
      &lt;td&gt;Engineering Effects (archaic category)&lt;/td&gt;
      &lt;td&gt;Nugent Slaughter [NOTE: Though no specific tit...&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10134&lt;/th&gt;
      &lt;td&gt;1927/28 (1st)&lt;/td&gt;
      &lt;td&gt;Unique and Artistic Picture (archaic category)&lt;/td&gt;
      &lt;td&gt;Fox&lt;/td&gt;
      &lt;td&gt;Sunrise&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10135&lt;/th&gt;
      &lt;td&gt;1927/28 (1st)&lt;/td&gt;
      &lt;td&gt;Unique and Artistic Picture (archaic category)&lt;/td&gt;
      &lt;td&gt;Metro-Goldwyn-Mayer&lt;/td&gt;
      &lt;td&gt;The Crowd&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10136&lt;/th&gt;
      &lt;td&gt;1927/28 (1st)&lt;/td&gt;
      &lt;td&gt;Unique and Artistic Picture (archaic category)&lt;/td&gt;
      &lt;td&gt;Paramount Famous Lasky&lt;/td&gt;
      &lt;td&gt;Chang&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;10137 rows × 11 columns&lt;/p&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.ix[5].value_counts()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;C:\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: DeprecationWarning:
.ix is deprecated. Please use
.loc for label based indexing or
.iloc for positional indexing

See the documentation here:
http://pandas.pydata.org/pandas-docs/stable/indexing.html#deprecate_ix
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.





Christian Bale                  1
YES                             1
Actor -- Supporting Role        1
The Fighter {&#39;Dicky Eklund&#39;}    1
2010 (83rd)                     1
Name: 5, dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;filtering-the-data&#34;&gt;Filtering The Data&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;Year&#39;] = df[&#39;Year&#39;].str[0:4]
df[&#39;Year&#39;] = df[&#39;Year&#39;].astype(&#39;int64&#39;)

later_than_2000 = df[df[&#39;Year&#39;] &amp;gt; 2000]
award_categories = [&#39;Actor -- Leading Role&#39;, &#39;Actor -- Supporting Role&#39;, &#39;Actress -- Leading Role&#39;, &#39;Actress -- Supporting Role&#39;]

nominations = later_than_2000[later_than_2000[&amp;quot;Category&amp;quot;].isin(award_categories)]

print(nominations.head())
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;   Year               Category          Nominee  \
0  2010  Actor -- Leading Role    Javier Bardem   
1  2010  Actor -- Leading Role     Jeff Bridges   
2  2010  Actor -- Leading Role  Jesse Eisenberg   
3  2010  Actor -- Leading Role      Colin Firth   
4  2010  Actor -- Leading Role     James Franco   

                          Additional Info Won? Unnamed: 5 Unnamed: 6  \
0                      Biutiful {&#39;Uxbal&#39;}   NO        NaN        NaN   
1           True Grit {&#39;Rooster Cogburn&#39;}   NO        NaN        NaN   
2  The Social Network {&#39;Mark Zuckerberg&#39;}   NO        NaN        NaN   
3    The King&#39;s Speech {&#39;King George VI&#39;}  YES        NaN        NaN   
4              127 Hours {&#39;Aron Ralston&#39;}   NO        NaN        NaN   

  Unnamed: 7 Unnamed: 8 Unnamed: 9 Unnamed: 10  
0        NaN        NaN        NaN         NaN  
1        NaN        NaN        NaN         NaN  
2        NaN        NaN        NaN         NaN  
3        NaN        NaN        NaN         NaN  
4        NaN        NaN        NaN         NaN  
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;cleaning-up-the-won-and-unnamed-columns&#34;&gt;Cleaning Up The Won? And Unnamed Columns&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.options.mode.chained_assignment = None # default=&#39;warn&#39;
replace_dict = {&#39;NO&#39;: 0, &#39;YES&#39;: 1}
nominations[&#39;Won?&#39;] = nominations[&#39;Won?&#39;].map(replace_dict)
nominations[&#39;Won&#39;] = nominations[&#39;Won?&#39;]
drop_cols = [&#39;Won?&#39;, &#39;Unnamed: 5&#39;, &#39;Unnamed: 6&#39;, &#39;Unnamed: 7&#39;, &#39;Unnamed: 8&#39;, &#39;Unnamed: 9&#39;, &#39;Unnamed: 10&#39;]

final_nominations = nominations.drop(drop_cols, axis=1)
final_nominations.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style&gt;
    .dataframe thead tr:only-child th {
        text-align: right;
    }

    .dataframe thead th {
        text-align: left;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Year&lt;/th&gt;
      &lt;th&gt;Category&lt;/th&gt;
      &lt;th&gt;Nominee&lt;/th&gt;
      &lt;th&gt;Additional Info&lt;/th&gt;
      &lt;th&gt;Won&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2010&lt;/td&gt;
      &lt;td&gt;Actor -- Leading Role&lt;/td&gt;
      &lt;td&gt;Javier Bardem&lt;/td&gt;
      &lt;td&gt;Biutiful {&#39;Uxbal&#39;}&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2010&lt;/td&gt;
      &lt;td&gt;Actor -- Leading Role&lt;/td&gt;
      &lt;td&gt;Jeff Bridges&lt;/td&gt;
      &lt;td&gt;True Grit {&#39;Rooster Cogburn&#39;}&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2010&lt;/td&gt;
      &lt;td&gt;Actor -- Leading Role&lt;/td&gt;
      &lt;td&gt;Jesse Eisenberg&lt;/td&gt;
      &lt;td&gt;The Social Network {&#39;Mark Zuckerberg&#39;}&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2010&lt;/td&gt;
      &lt;td&gt;Actor -- Leading Role&lt;/td&gt;
      &lt;td&gt;Colin Firth&lt;/td&gt;
      &lt;td&gt;The King&#39;s Speech {&#39;King George VI&#39;}&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2010&lt;/td&gt;
      &lt;td&gt;Actor -- Leading Role&lt;/td&gt;
      &lt;td&gt;James Franco&lt;/td&gt;
      &lt;td&gt;127 Hours {&#39;Aron Ralston&#39;}&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h1 id=&#34;cleaning-up-the-additional-info-column&#34;&gt;Cleaning Up The Additional Info Column&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;The values in this column contain the movie name and the character the nominee played. Instead of keeping these values in 1 column, split them up into 2 different columns for easier querying.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;additional_info_one = final_nominations[&#39;Additional Info&#39;].str.rstrip(&amp;quot;&#39;}&amp;quot;)
additional_info_two = additional_info_one.str.split(&amp;quot; {&#39;&amp;quot;)
movie_names = additional_info_two.str[0]
characters = additional_info_two.str[1]

final_nominations[&#39;Movie&#39;] = movie_names
final_nominations[&#39;Character&#39;] = characters

final_nominations = final_nominations.drop(&amp;quot;Additional Info&amp;quot;, axis=1)
final_nominations.head()

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style&gt;
    .dataframe thead tr:only-child th {
        text-align: right;
    }

    .dataframe thead th {
        text-align: left;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Year&lt;/th&gt;
      &lt;th&gt;Category&lt;/th&gt;
      &lt;th&gt;Nominee&lt;/th&gt;
      &lt;th&gt;Won&lt;/th&gt;
      &lt;th&gt;Movie&lt;/th&gt;
      &lt;th&gt;Character&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2010&lt;/td&gt;
      &lt;td&gt;Actor -- Leading Role&lt;/td&gt;
      &lt;td&gt;Javier Bardem&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;Biutiful&lt;/td&gt;
      &lt;td&gt;Uxbal&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2010&lt;/td&gt;
      &lt;td&gt;Actor -- Leading Role&lt;/td&gt;
      &lt;td&gt;Jeff Bridges&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;True Grit&lt;/td&gt;
      &lt;td&gt;Rooster Cogburn&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2010&lt;/td&gt;
      &lt;td&gt;Actor -- Leading Role&lt;/td&gt;
      &lt;td&gt;Jesse Eisenberg&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;The Social Network&lt;/td&gt;
      &lt;td&gt;Mark Zuckerberg&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2010&lt;/td&gt;
      &lt;td&gt;Actor -- Leading Role&lt;/td&gt;
      &lt;td&gt;Colin Firth&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;The King&#39;s Speech&lt;/td&gt;
      &lt;td&gt;King George VI&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2010&lt;/td&gt;
      &lt;td&gt;Actor -- Leading Role&lt;/td&gt;
      &lt;td&gt;James Franco&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;127 Hours&lt;/td&gt;
      &lt;td&gt;Aron Ralston&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h1 id=&#34;exporting-to-sqlite&#34;&gt;Exporting To SQLite&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sqlite3

conn = sqlite3.connect(&amp;quot;nominations.db&amp;quot;)
final_nominations.to_sql(&amp;quot;nominations&amp;quot;, conn, index=False)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&amp;lt;ipython-input-8-102f757f32a4&amp;gt; in &amp;lt;module&amp;gt;()
      2
      3 conn = sqlite3.connect(&amp;quot;nominations.db&amp;quot;)
----&amp;gt; 4 final_nominations.to_sql(&amp;quot;nominations&amp;quot;, conn, index=False)


C:\Anaconda3\lib\site-packages\pandas\core\generic.py in to_sql(self, name, con, flavor, schema, if_exists, index, index_label, chunksize, dtype)
   1343         sql.to_sql(self, name, con, flavor=flavor, schema=schema,
   1344                    if_exists=if_exists, index=index, index_label=index_label,
-&amp;gt; 1345                    chunksize=chunksize, dtype=dtype)
   1346
   1347     def to_pickle(self, path, compression=&#39;infer&#39;):


C:\Anaconda3\lib\site-packages\pandas\io\sql.py in to_sql(frame, name, con, flavor, schema, if_exists, index, index_label, chunksize, dtype)
    469     pandas_sql.to_sql(frame, name, if_exists=if_exists, index=index,
    470                       index_label=index_label, schema=schema,
--&amp;gt; 471                       chunksize=chunksize, dtype=dtype)
    472
    473


C:\Anaconda3\lib\site-packages\pandas\io\sql.py in to_sql(self, frame, name, if_exists, index, index_label, schema, chunksize, dtype)
   1503                             if_exists=if_exists, index_label=index_label,
   1504                             dtype=dtype)
-&amp;gt; 1505         table.create()
   1506         table.insert(chunksize)
   1507


C:\Anaconda3\lib\site-packages\pandas\io\sql.py in create(self)
    586         if self.exists():
    587             if self.if_exists == &#39;fail&#39;:
--&amp;gt; 588                 raise ValueError(&amp;quot;Table &#39;%s&#39; already exists.&amp;quot; % self.name)
    589             elif self.if_exists == &#39;replace&#39;:
    590                 self.pd_sql.drop_table(self.name, self.schema)


ValueError: Table &#39;nominations&#39; already exists.
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;verifying-in-sql&#34;&gt;Verifying In SQL&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;query_one = &amp;quot;PRAGMA table_info(nominations)&amp;quot;
query_two = &amp;quot;select * from nominations limit 10&amp;quot;
print(conn.execute(query_one).fetchall())
print(conn.execute(query_two).fetchall())
conn.close()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>StarWars Survey. Which is the most popular version?</title>
      <link>https://coderhook-ml.firebaseapp.com/project/star_wars-survey/</link>
      <pubDate>Thu, 27 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coderhook-ml.firebaseapp.com/project/star_wars-survey/</guid>
      <description>

&lt;h1 id=&#34;star-wars-survey&#34;&gt;Star Wars Survey&lt;/h1&gt;

&lt;h3 id=&#34;in-this-project-we-are-going-first-to-clean-the-data-and-then-get-some-interesting-insight-on-the-movies-of-star-wars-to-see-what-version-were-more-popular&#34;&gt;In this project we are going first to clean the data, and then get some interesting insight on the movies of Star Wars to see what version were more popular.&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
star_wars = pd.read_csv(&amp;quot;star_wars.csv&amp;quot;, encoding=&amp;quot;ISO-8859-1&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;star_wars.head(10)
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;RespondentID&lt;/th&gt;
      &lt;th&gt;Have you seen any of the 6 films in the Star Wars franchise?&lt;/th&gt;
      &lt;th&gt;Do you consider yourself to be a fan of the Star Wars film franchise?&lt;/th&gt;
      &lt;th&gt;Which of the following Star Wars films have you seen? Please select all that apply.&lt;/th&gt;
      &lt;th&gt;Unnamed: 4&lt;/th&gt;
      &lt;th&gt;Unnamed: 5&lt;/th&gt;
      &lt;th&gt;Unnamed: 6&lt;/th&gt;
      &lt;th&gt;Unnamed: 7&lt;/th&gt;
      &lt;th&gt;Unnamed: 8&lt;/th&gt;
      &lt;th&gt;Please rank the Star Wars films in order of preference with 1 being your favorite film in the franchise and 6 being your least favorite film.&lt;/th&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;th&gt;Unnamed: 28&lt;/th&gt;
      &lt;th&gt;Which character shot first?&lt;/th&gt;
      &lt;th&gt;Are you familiar with the Expanded Universe?&lt;/th&gt;
      &lt;th&gt;Do you consider yourself to be a fan of the Expanded Universe?ÂÃ¦&lt;/th&gt;
      &lt;th&gt;Do you consider yourself to be a fan of the Star Trek franchise?&lt;/th&gt;
      &lt;th&gt;Gender&lt;/th&gt;
      &lt;th&gt;Age&lt;/th&gt;
      &lt;th&gt;Household Income&lt;/th&gt;
      &lt;th&gt;Education&lt;/th&gt;
      &lt;th&gt;Location (Census Region)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Response&lt;/td&gt;
      &lt;td&gt;Response&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode I  The Phantom Menace&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode II  Attack of the Clones&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode III  Revenge of the Sith&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode IV  A New Hope&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode V The Empire Strikes Back&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode VI Return of the Jedi&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode I  The Phantom Menace&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;Yoda&lt;/td&gt;
      &lt;td&gt;Response&lt;/td&gt;
      &lt;td&gt;Response&lt;/td&gt;
      &lt;td&gt;Response&lt;/td&gt;
      &lt;td&gt;Response&lt;/td&gt;
      &lt;td&gt;Response&lt;/td&gt;
      &lt;td&gt;Response&lt;/td&gt;
      &lt;td&gt;Response&lt;/td&gt;
      &lt;td&gt;Response&lt;/td&gt;
      &lt;td&gt;Response&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;3.292880e+09&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode I  The Phantom Menace&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode II  Attack of the Clones&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode III  Revenge of the Sith&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode IV  A New Hope&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode V The Empire Strikes Back&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode VI Return of the Jedi&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;Very favorably&lt;/td&gt;
      &lt;td&gt;I don&#39;t understand this question&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;18-29&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;High school degree&lt;/td&gt;
      &lt;td&gt;South Atlantic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;3.292880e+09&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;18-29&lt;/td&gt;
      &lt;td&gt;$0 - $24,999&lt;/td&gt;
      &lt;td&gt;Bachelor degree&lt;/td&gt;
      &lt;td&gt;West South Central&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;3.292765e+09&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode I  The Phantom Menace&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode II  Attack of the Clones&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode III  Revenge of the Sith&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;Unfamiliar (N/A)&lt;/td&gt;
      &lt;td&gt;I don&#39;t understand this question&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;18-29&lt;/td&gt;
      &lt;td&gt;$0 - $24,999&lt;/td&gt;
      &lt;td&gt;High school degree&lt;/td&gt;
      &lt;td&gt;West North Central&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;3.292763e+09&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode I  The Phantom Menace&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode II  Attack of the Clones&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode III  Revenge of the Sith&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode IV  A New Hope&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode V The Empire Strikes Back&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode VI Return of the Jedi&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;Very favorably&lt;/td&gt;
      &lt;td&gt;I don&#39;t understand this question&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;18-29&lt;/td&gt;
      &lt;td&gt;$100,000 - $149,999&lt;/td&gt;
      &lt;td&gt;Some college or Associate degree&lt;/td&gt;
      &lt;td&gt;West North Central&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;3.292731e+09&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode I  The Phantom Menace&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode II  Attack of the Clones&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode III  Revenge of the Sith&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode IV  A New Hope&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode V The Empire Strikes Back&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode VI Return of the Jedi&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;Somewhat favorably&lt;/td&gt;
      &lt;td&gt;Greedo&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;18-29&lt;/td&gt;
      &lt;td&gt;$100,000 - $149,999&lt;/td&gt;
      &lt;td&gt;Some college or Associate degree&lt;/td&gt;
      &lt;td&gt;West North Central&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;3.292719e+09&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode I  The Phantom Menace&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode II  Attack of the Clones&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode III  Revenge of the Sith&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode IV  A New Hope&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode V The Empire Strikes Back&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode VI Return of the Jedi&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;Very favorably&lt;/td&gt;
      &lt;td&gt;Han&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;18-29&lt;/td&gt;
      &lt;td&gt;$25,000 - $49,999&lt;/td&gt;
      &lt;td&gt;Bachelor degree&lt;/td&gt;
      &lt;td&gt;Middle Atlantic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;3.292685e+09&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode I  The Phantom Menace&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode II  Attack of the Clones&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode III  Revenge of the Sith&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode IV  A New Hope&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode V The Empire Strikes Back&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode VI Return of the Jedi&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;Very favorably&lt;/td&gt;
      &lt;td&gt;Han&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;18-29&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;High school degree&lt;/td&gt;
      &lt;td&gt;East North Central&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;3.292664e+09&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode I  The Phantom Menace&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode II  Attack of the Clones&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode III  Revenge of the Sith&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode IV  A New Hope&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode V The Empire Strikes Back&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode VI Return of the Jedi&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;Very favorably&lt;/td&gt;
      &lt;td&gt;Han&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;18-29&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;High school degree&lt;/td&gt;
      &lt;td&gt;South Atlantic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;3.292654e+09&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode I  The Phantom Menace&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode II  Attack of the Clones&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode III  Revenge of the Sith&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode IV  A New Hope&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode V The Empire Strikes Back&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode VI Return of the Jedi&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;Somewhat favorably&lt;/td&gt;
      &lt;td&gt;Han&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;18-29&lt;/td&gt;
      &lt;td&gt;$0 - $24,999&lt;/td&gt;
      &lt;td&gt;Some college or Associate degree&lt;/td&gt;
      &lt;td&gt;South Atlantic&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;10 rows × 38 columns&lt;/p&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;star_wars.columns
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Index([&#39;RespondentID&#39;,
       &#39;Have you seen any of the 6 films in the Star Wars franchise?&#39;,
       &#39;Do you consider yourself to be a fan of the Star Wars film franchise?&#39;,
       &#39;Which of the following Star Wars films have you seen? Please select all that apply.&#39;,
       &#39;Unnamed: 4&#39;, &#39;Unnamed: 5&#39;, &#39;Unnamed: 6&#39;, &#39;Unnamed: 7&#39;, &#39;Unnamed: 8&#39;,
       &#39;Please rank the Star Wars films in order of preference with 1 being your favorite film in the franchise and 6 being your least favorite film.&#39;,
       &#39;Unnamed: 10&#39;, &#39;Unnamed: 11&#39;, &#39;Unnamed: 12&#39;, &#39;Unnamed: 13&#39;,
       &#39;Unnamed: 14&#39;,
       &#39;Please state whether you view the following characters favorably, unfavorably, or are unfamiliar with him/her.&#39;,
       &#39;Unnamed: 16&#39;, &#39;Unnamed: 17&#39;, &#39;Unnamed: 18&#39;, &#39;Unnamed: 19&#39;,
       &#39;Unnamed: 20&#39;, &#39;Unnamed: 21&#39;, &#39;Unnamed: 22&#39;, &#39;Unnamed: 23&#39;,
       &#39;Unnamed: 24&#39;, &#39;Unnamed: 25&#39;, &#39;Unnamed: 26&#39;, &#39;Unnamed: 27&#39;,
       &#39;Unnamed: 28&#39;, &#39;Which character shot first?&#39;,
       &#39;Are you familiar with the Expanded Universe?&#39;,
       &#39;Do you consider yourself to be a fan of the Expanded Universe?ÂÃ¦&#39;,
       &#39;Do you consider yourself to be a fan of the Star Trek franchise?&#39;,
       &#39;Gender&#39;, &#39;Age&#39;, &#39;Household Income&#39;, &#39;Education&#39;,
       &#39;Location (Census Region)&#39;],
      dtype=&#39;object&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;star_wars = star_wars[pd.notnull(star_wars[&#39;RespondentID&#39;])]
print(star_wars.head())
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;   RespondentID Have you seen any of the 6 films in the Star Wars franchise?  \
1  3.292880e+09                                                Yes             
2  3.292880e+09                                                 No             
3  3.292765e+09                                                Yes             
4  3.292763e+09                                                Yes             
5  3.292731e+09                                                Yes             

  Do you consider yourself to be a fan of the Star Wars film franchise?  \
1                                                Yes                      
2                                                NaN                      
3                                                 No                      
4                                                Yes                      
5                                                Yes                      

  Which of the following Star Wars films have you seen? Please select all that apply.  \
1           Star Wars: Episode I  The Phantom Menace                                    
2                                                NaN                                    
3           Star Wars: Episode I  The Phantom Menace                                    
4           Star Wars: Episode I  The Phantom Menace                                    
5           Star Wars: Episode I  The Phantom Menace                                    

                                    Unnamed: 4  \
1  Star Wars: Episode II  Attack of the Clones   
2                                          NaN   
3  Star Wars: Episode II  Attack of the Clones   
4  Star Wars: Episode II  Attack of the Clones   
5  Star Wars: Episode II  Attack of the Clones   

                                    Unnamed: 5  \
1  Star Wars: Episode III  Revenge of the Sith   
2                                          NaN   
3  Star Wars: Episode III  Revenge of the Sith   
4  Star Wars: Episode III  Revenge of the Sith   
5  Star Wars: Episode III  Revenge of the Sith   

                          Unnamed: 6  \
1  Star Wars: Episode IV  A New Hope   
2                                NaN   
3                                NaN   
4  Star Wars: Episode IV  A New Hope   
5  Star Wars: Episode IV  A New Hope   

                                     Unnamed: 7  \
1  Star Wars: Episode V The Empire Strikes Back   
2                                           NaN   
3                                           NaN   
4  Star Wars: Episode V The Empire Strikes Back   
5  Star Wars: Episode V The Empire Strikes Back   

                                 Unnamed: 8  \
1  Star Wars: Episode VI Return of the Jedi   
2                                       NaN   
3                                       NaN   
4  Star Wars: Episode VI Return of the Jedi   
5  Star Wars: Episode VI Return of the Jedi   

  Please rank the Star Wars films in order of preference with 1 being your favorite film in the franchise and 6 being your least favorite film.  \
1                                                  3                                                                                              
2                                                NaN                                                                                              
3                                                  1                                                                                              
4                                                  5                                                                                              
5                                                  5                                                                                              

            ...                    Unnamed: 28  \
1           ...                 Very favorably   
2           ...                            NaN   
3           ...               Unfamiliar (N/A)   
4           ...                 Very favorably   
5           ...             Somewhat favorably   

        Which character shot first?  \
1  I don&#39;t understand this question   
2                               NaN   
3  I don&#39;t understand this question   
4  I don&#39;t understand this question   
5                            Greedo   

  Are you familiar with the Expanded Universe?  \
1                                          Yes   
2                                          NaN   
3                                           No   
4                                           No   
5                                          Yes   

  Do you consider yourself to be a fan of the Expanded Universe?ÂÃ¦  \
1                                                 No                   
2                                                NaN                   
3                                                NaN                   
4                                                NaN                   
5                                                 No                   

  Do you consider yourself to be a fan of the Star Trek franchise? Gender  \
1                                                 No                 Male   
2                                                Yes                 Male   
3                                                 No                 Male   
4                                                Yes                 Male   
5                                                 No                 Male   

     Age     Household Income                         Education  \
1  18-29                  NaN                High school degree   
2  18-29         $0 - $24,999                   Bachelor degree   
3  18-29         $0 - $24,999                High school degree   
4  18-29  $100,000 - $149,999  Some college or Associate degree   
5  18-29  $100,000 - $149,999  Some college or Associate degree   

  Location (Census Region)  
1           South Atlantic  
2       West South Central  
3       West North Central  
4       West North Central  
5       West North Central  

[5 rows x 38 columns]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Now we have all our dataframe with only rows with a valid ResponseID&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;cleaning-and-mapping-yes-no-columns&#34;&gt;Cleaning And Mapping Yes/No Columns&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;yes_no = {&#39;Yes&#39;: True, &amp;quot;No&amp;quot;: False}

have_you_see = &#39;Have you seen any of the 6 films in the Star Wars franchise?&#39;
do_you_consider = &#39;Do you consider yourself to be a fan of the Star Wars film franchise?&#39;

star_wars[have_you_see] = star_wars[have_you_see].map(yes_no)
star_wars[do_you_consider] = star_wars[do_you_consider].map(yes_no)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;star_wars.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;RespondentID&lt;/th&gt;
      &lt;th&gt;Have you seen any of the 6 films in the Star Wars franchise?&lt;/th&gt;
      &lt;th&gt;Do you consider yourself to be a fan of the Star Wars film franchise?&lt;/th&gt;
      &lt;th&gt;Which of the following Star Wars films have you seen? Please select all that apply.&lt;/th&gt;
      &lt;th&gt;Unnamed: 4&lt;/th&gt;
      &lt;th&gt;Unnamed: 5&lt;/th&gt;
      &lt;th&gt;Unnamed: 6&lt;/th&gt;
      &lt;th&gt;Unnamed: 7&lt;/th&gt;
      &lt;th&gt;Unnamed: 8&lt;/th&gt;
      &lt;th&gt;Please rank the Star Wars films in order of preference with 1 being your favorite film in the franchise and 6 being your least favorite film.&lt;/th&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;th&gt;Unnamed: 28&lt;/th&gt;
      &lt;th&gt;Which character shot first?&lt;/th&gt;
      &lt;th&gt;Are you familiar with the Expanded Universe?&lt;/th&gt;
      &lt;th&gt;Do you consider yourself to be a fan of the Expanded Universe?ÂÃ¦&lt;/th&gt;
      &lt;th&gt;Do you consider yourself to be a fan of the Star Trek franchise?&lt;/th&gt;
      &lt;th&gt;Gender&lt;/th&gt;
      &lt;th&gt;Age&lt;/th&gt;
      &lt;th&gt;Household Income&lt;/th&gt;
      &lt;th&gt;Education&lt;/th&gt;
      &lt;th&gt;Location (Census Region)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;3.292880e+09&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode I  The Phantom Menace&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode II  Attack of the Clones&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode III  Revenge of the Sith&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode IV  A New Hope&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode V The Empire Strikes Back&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode VI Return of the Jedi&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;Very favorably&lt;/td&gt;
      &lt;td&gt;I don&#39;t understand this question&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;18-29&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;High school degree&lt;/td&gt;
      &lt;td&gt;South Atlantic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;3.292880e+09&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;18-29&lt;/td&gt;
      &lt;td&gt;$0 - $24,999&lt;/td&gt;
      &lt;td&gt;Bachelor degree&lt;/td&gt;
      &lt;td&gt;West South Central&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;3.292765e+09&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode I  The Phantom Menace&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode II  Attack of the Clones&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode III  Revenge of the Sith&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;Unfamiliar (N/A)&lt;/td&gt;
      &lt;td&gt;I don&#39;t understand this question&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;18-29&lt;/td&gt;
      &lt;td&gt;$0 - $24,999&lt;/td&gt;
      &lt;td&gt;High school degree&lt;/td&gt;
      &lt;td&gt;West North Central&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;3.292763e+09&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode I  The Phantom Menace&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode II  Attack of the Clones&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode III  Revenge of the Sith&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode IV  A New Hope&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode V The Empire Strikes Back&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode VI Return of the Jedi&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;Very favorably&lt;/td&gt;
      &lt;td&gt;I don&#39;t understand this question&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;18-29&lt;/td&gt;
      &lt;td&gt;$100,000 - $149,999&lt;/td&gt;
      &lt;td&gt;Some college or Associate degree&lt;/td&gt;
      &lt;td&gt;West North Central&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;3.292731e+09&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode I  The Phantom Menace&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode II  Attack of the Clones&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode III  Revenge of the Sith&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode IV  A New Hope&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode V The Empire Strikes Back&lt;/td&gt;
      &lt;td&gt;Star Wars: Episode VI Return of the Jedi&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;Somewhat favorably&lt;/td&gt;
      &lt;td&gt;Greedo&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;18-29&lt;/td&gt;
      &lt;td&gt;$100,000 - $149,999&lt;/td&gt;
      &lt;td&gt;Some college or Associate degree&lt;/td&gt;
      &lt;td&gt;West North Central&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;5 rows × 38 columns&lt;/p&gt;
&lt;/div&gt;

&lt;h1 id=&#34;cleaning-and-mapping-checkbox-columns&#34;&gt;Cleaning And Mapping Checkbox Columns&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np

yes_no_episodes = {
   &amp;quot;Star Wars: Episode I  The Phantom Menace&amp;quot;: True,
    np.nan: False,
    &amp;quot;Star Wars: Episode II  Attack of the Clones&amp;quot;: True,
    &amp;quot;Star Wars: Episode III  Revenge of the Sith&amp;quot;: True,
    &amp;quot;Star Wars: Episode IV  A New Hope&amp;quot;: True,
    &amp;quot;Star Wars: Episode V The Empire Strikes Back&amp;quot;: True,
    &amp;quot;Star Wars: Episode VI Return of the Jedi&amp;quot;: True
}
star_wars = star_wars.rename(columns = {
    &amp;quot;Which of the following Star Wars films have you seen? Please select all that apply.&amp;quot;: &#39;Seen 1&#39;,
    &amp;quot;Unnamed: 4&amp;quot;: &#39;Seen 2&#39;,
    &amp;quot;Unnamed: 5&amp;quot;: &#39;Seen 3&#39;,
    &amp;quot;Unnamed: 6&amp;quot;: &#39;Seen 4&#39;,
    &amp;quot;Unnamed: 7&amp;quot;: &#39;Seen 5&#39;,
    &amp;quot;Unnamed: 8&amp;quot;: &#39;Seen 6&#39;
})


for col in star_wars.columns[3:9]:
    star_wars[col] = star_wars[col].map(yes_no_episodes)

star_wars.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;RespondentID&lt;/th&gt;
      &lt;th&gt;Have you seen any of the 6 films in the Star Wars franchise?&lt;/th&gt;
      &lt;th&gt;Do you consider yourself to be a fan of the Star Wars film franchise?&lt;/th&gt;
      &lt;th&gt;Seen 1&lt;/th&gt;
      &lt;th&gt;Seen 2&lt;/th&gt;
      &lt;th&gt;Seen 3&lt;/th&gt;
      &lt;th&gt;Seen 4&lt;/th&gt;
      &lt;th&gt;Seen 5&lt;/th&gt;
      &lt;th&gt;Seen 6&lt;/th&gt;
      &lt;th&gt;Please rank the Star Wars films in order of preference with 1 being your favorite film in the franchise and 6 being your least favorite film.&lt;/th&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;th&gt;Unnamed: 28&lt;/th&gt;
      &lt;th&gt;Which character shot first?&lt;/th&gt;
      &lt;th&gt;Are you familiar with the Expanded Universe?&lt;/th&gt;
      &lt;th&gt;Do you consider yourself to be a fan of the Expanded Universe?ÂÃ¦&lt;/th&gt;
      &lt;th&gt;Do you consider yourself to be a fan of the Star Trek franchise?&lt;/th&gt;
      &lt;th&gt;Gender&lt;/th&gt;
      &lt;th&gt;Age&lt;/th&gt;
      &lt;th&gt;Household Income&lt;/th&gt;
      &lt;th&gt;Education&lt;/th&gt;
      &lt;th&gt;Location (Census Region)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;3.292880e+09&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;Very favorably&lt;/td&gt;
      &lt;td&gt;I don&#39;t understand this question&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;18-29&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;High school degree&lt;/td&gt;
      &lt;td&gt;South Atlantic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;3.292880e+09&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;18-29&lt;/td&gt;
      &lt;td&gt;$0 - $24,999&lt;/td&gt;
      &lt;td&gt;Bachelor degree&lt;/td&gt;
      &lt;td&gt;West South Central&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;3.292765e+09&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;Unfamiliar (N/A)&lt;/td&gt;
      &lt;td&gt;I don&#39;t understand this question&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;18-29&lt;/td&gt;
      &lt;td&gt;$0 - $24,999&lt;/td&gt;
      &lt;td&gt;High school degree&lt;/td&gt;
      &lt;td&gt;West North Central&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;3.292763e+09&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;Very favorably&lt;/td&gt;
      &lt;td&gt;I don&#39;t understand this question&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;18-29&lt;/td&gt;
      &lt;td&gt;$100,000 - $149,999&lt;/td&gt;
      &lt;td&gt;Some college or Associate degree&lt;/td&gt;
      &lt;td&gt;West North Central&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;3.292731e+09&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;Somewhat favorably&lt;/td&gt;
      &lt;td&gt;Greedo&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;18-29&lt;/td&gt;
      &lt;td&gt;$100,000 - $149,999&lt;/td&gt;
      &lt;td&gt;Some college or Associate degree&lt;/td&gt;
      &lt;td&gt;West North Central&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;5 rows × 38 columns&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Now as you can see we have substitute the names of the films by True or False so we can count how many views that movie had.&lt;/p&gt;

&lt;h1 id=&#34;cleaning-the-ranking-columns&#34;&gt;Cleaning The Ranking Columns&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;star_wars = star_wars.rename(columns = {
    star_wars.columns[9]: &amp;quot;Ranking 1&amp;quot;,
    star_wars.columns[10]: &amp;quot;Ranking 2&amp;quot;,
    star_wars.columns[11]: &amp;quot;Ranking 3&amp;quot;,
    star_wars.columns[12]: &amp;quot;Ranking 4&amp;quot;,
    star_wars.columns[13]: &amp;quot;Ranking 5&amp;quot;,
    star_wars.columns[14]: &amp;quot;Ranking 6&amp;quot;
})

star_wars.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;RespondentID&lt;/th&gt;
      &lt;th&gt;Have you seen any of the 6 films in the Star Wars franchise?&lt;/th&gt;
      &lt;th&gt;Do you consider yourself to be a fan of the Star Wars film franchise?&lt;/th&gt;
      &lt;th&gt;Seen 1&lt;/th&gt;
      &lt;th&gt;Seen 2&lt;/th&gt;
      &lt;th&gt;Seen 3&lt;/th&gt;
      &lt;th&gt;Seen 4&lt;/th&gt;
      &lt;th&gt;Seen 5&lt;/th&gt;
      &lt;th&gt;Seen 6&lt;/th&gt;
      &lt;th&gt;Ranking 1&lt;/th&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;th&gt;Unnamed: 28&lt;/th&gt;
      &lt;th&gt;Which character shot first?&lt;/th&gt;
      &lt;th&gt;Are you familiar with the Expanded Universe?&lt;/th&gt;
      &lt;th&gt;Do you consider yourself to be a fan of the Expanded Universe?ÂÃ¦&lt;/th&gt;
      &lt;th&gt;Do you consider yourself to be a fan of the Star Trek franchise?&lt;/th&gt;
      &lt;th&gt;Gender&lt;/th&gt;
      &lt;th&gt;Age&lt;/th&gt;
      &lt;th&gt;Household Income&lt;/th&gt;
      &lt;th&gt;Education&lt;/th&gt;
      &lt;th&gt;Location (Census Region)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;3.292880e+09&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;Very favorably&lt;/td&gt;
      &lt;td&gt;I don&#39;t understand this question&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;18-29&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;High school degree&lt;/td&gt;
      &lt;td&gt;South Atlantic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;3.292880e+09&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;18-29&lt;/td&gt;
      &lt;td&gt;$0 - $24,999&lt;/td&gt;
      &lt;td&gt;Bachelor degree&lt;/td&gt;
      &lt;td&gt;West South Central&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;3.292765e+09&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;Unfamiliar (N/A)&lt;/td&gt;
      &lt;td&gt;I don&#39;t understand this question&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;18-29&lt;/td&gt;
      &lt;td&gt;$0 - $24,999&lt;/td&gt;
      &lt;td&gt;High school degree&lt;/td&gt;
      &lt;td&gt;West North Central&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;3.292763e+09&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;Very favorably&lt;/td&gt;
      &lt;td&gt;I don&#39;t understand this question&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;18-29&lt;/td&gt;
      &lt;td&gt;$100,000 - $149,999&lt;/td&gt;
      &lt;td&gt;Some college or Associate degree&lt;/td&gt;
      &lt;td&gt;West North Central&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;3.292731e+09&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;Somewhat favorably&lt;/td&gt;
      &lt;td&gt;Greedo&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;18-29&lt;/td&gt;
      &lt;td&gt;$100,000 - $149,999&lt;/td&gt;
      &lt;td&gt;Some college or Associate degree&lt;/td&gt;
      &lt;td&gt;West North Central&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;5 rows × 38 columns&lt;/p&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;star_wars[star_wars.columns[9:15]] = star_wars[star_wars.columns[9:15]].astype(float)

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;finding-the-highest-ranked-movie&#34;&gt;Finding The Highest-Ranked Movie&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;star_wars[star_wars.columns[9:15]].mean()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Ranking 1    3.732934
Ranking 2    4.087321
Ranking 3    4.341317
Ranking 4    3.272727
Ranking 5    2.513158
Ranking 6    3.047847
dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%matplotlib inline
import matplotlib.pyplot as plt

plt.bar(range(6), star_wars[star_wars.columns[9:15]].mean())
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Container object of 6 artists&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://coderhook-ml.firebaseapp.com/img/ds/starwars_survey/output_17_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At this moment we have the data cleaned and also the rankings with the means, thanks to that we can also check which movie has a higher rank, as we can appreciate the old movies, 4, 5 and 6 are ranked better that the new ones.&lt;/p&gt;

&lt;h1 id=&#34;finding-the-most-viewed-movie&#34;&gt;Finding The Most Viewed Movie&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;star_wars[star_wars.columns[3:9]].sum()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Seen 1    673
Seen 2    571
Seen 3    550
Seen 4    607
Seen 5    758
Seen 6    738
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.bar(range(6), star_wars[star_wars.columns[3:9]].sum())
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Container object of 6 artists&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://coderhook-ml.firebaseapp.com/img/ds/starwars_survey/output_21_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We can appreciate that the most seen movies are the old ones, also remember that are the ones that people liked the most.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;exploring-the-data-by-binary-segments&#34;&gt;Exploring The Data By Binary Segments&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;male = star_wars[star_wars[&#39;Gender&#39;] == &#39;Male&#39;]
female = star_wars[star_wars[&#39;Gender&#39;] == &#39;Female&#39;]

plt.bar(range(6), male[male.columns[9:15]].mean())
plt.show()

plt.bar(range(6), female[female.columns[9:15]].mean())
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://coderhook-ml.firebaseapp.com/img/ds/starwars_survey/output_24_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://coderhook-ml.firebaseapp.com/img/ds/starwars_survey/output_24_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.bar(range(6), male[male.columns[3:9]].sum())
plt.show()

plt.bar(range(6), male[male.columns[3:9]].sum())
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://coderhook-ml.firebaseapp.com/img/ds/starwars_survey/output_25_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://coderhook-ml.firebaseapp.com/img/ds/starwars_survey/output_25_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;We can say that both genders equally have seen the same movies the most and also ranked in the same manner, so there is no difference between gender in this case.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Visualizing the gender gap in Major College Degrees</title>
      <link>https://coderhook-ml.firebaseapp.com/project/gendergap/</link>
      <pubDate>Thu, 27 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coderhook-ml.firebaseapp.com/project/gendergap/</guid>
      <description>

&lt;h1 id=&#34;visualizing-the-gender-gap-in-college&#34;&gt;Visualizing the gender Gap in College&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%matplotlib inline
import pandas as pd
import matplotlib.pyplot as plt

women_degrees = pd.read_csv(&#39;percent-bachelors-degrees-women-usa.csv&#39;)
cb_dark_blue = (0/255,107/255,164/255)
cb_orange = (255/255, 128/255, 14/255)
stem_cats = [&#39;Engineering&#39;, &#39;Computer Science&#39;, &#39;Psychology&#39;, &#39;Biology&#39;, &#39;Physical Sciences&#39;, &#39;Math and Statistics&#39;]

fig = plt.figure(figsize=(18, 3))

for sp in range(0,6):
    ax = fig.add_subplot(1,6,sp+1)
    ax.plot(women_degrees[&#39;Year&#39;], women_degrees[stem_cats[sp]], c=cb_dark_blue, label=&#39;Women&#39;, linewidth=3)
    ax.plot(women_degrees[&#39;Year&#39;], 100-women_degrees[stem_cats[sp]], c=cb_orange, label=&#39;Men&#39;, linewidth=3)
    ax.spines[&amp;quot;right&amp;quot;].set_visible(False)    
    ax.spines[&amp;quot;left&amp;quot;].set_visible(False)
    ax.spines[&amp;quot;top&amp;quot;].set_visible(False)    
    ax.spines[&amp;quot;bottom&amp;quot;].set_visible(False)
    ax.set_xlim(1968, 2011)
    ax.set_ylim(0,100)
    ax.set_title(stem_cats[sp])
    ax.tick_params(bottom=&amp;quot;off&amp;quot;, top=&amp;quot;off&amp;quot;, left=&amp;quot;off&amp;quot;, right=&amp;quot;off&amp;quot;)

    if sp == 0:
        ax.text(2005, 87, &#39;Men&#39;)
        ax.text(2002, 8, &#39;Women&#39;)
    elif sp == 5:
        ax.text(2005, 62, &#39;Men&#39;)
        ax.text(2001, 35, &#39;Women&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://coderhook-ml.firebaseapp.com/img/ds/gendergap/output_1_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Data for this plots
stem_cats = [&#39;Psychology&#39;, &#39;Biology&#39;, &#39;Math and Statistics&#39;, &#39;Physical Sciences&#39;, &#39;Computer Science&#39;, &#39;Engineering&#39;, &#39;Computer Science&#39;]
lib_arts_cats = [&#39;Foreign Languages&#39;, &#39;English&#39;, &#39;Communications and Journalism&#39;, &#39;Art and Performance&#39;, &#39;Social Sciences and History&#39;]
other_cats = [&#39;Health Professions&#39;, &#39;Public Administration&#39;, &#39;Education&#39;, &#39;Agriculture&#39;,&#39;Business&#39;, &#39;Architecture&#39;]


fig = plt.figure(figsize=(16, 16))
count_stem = 0
count_lib_arts = 0
count_other = 0

#First column, STEM degrees
for sp in range(0, 18, 3):
    ax = fig.add_subplot(6, 3, sp+1)
    ax.plot(women_degrees[&#39;Year&#39;], women_degrees[stem_cats[count_stem]], c=cb_dark_blue, label=&amp;quot;Women&amp;quot;, linewidth=3)
    ax.plot(women_degrees[&#39;Year&#39;], 100-women_degrees[stem_cats[count_stem]], c= cb_orange, label=&amp;quot;Men&amp;quot;, linewidth=3)
    ax.set_xlim(1970, 2010)
    ax.set_ylim(0, 100)
    ax.set_title(stem_cats[count_stem])
    ax.tick_params(bottom = &amp;quot;off&amp;quot;, left = &amp;quot;off&amp;quot;, top = &amp;quot;off&amp;quot;, right = &amp;quot;off&amp;quot;)
    ax.spines[&amp;quot;right&amp;quot;].set_visible(False)    
    ax.spines[&amp;quot;left&amp;quot;].set_visible(False)
    ax.spines[&amp;quot;top&amp;quot;].set_visible(False)    
    ax.spines[&amp;quot;bottom&amp;quot;].set_visible(False)
    ax.tick_params(labelbottom=&#39;off&#39;)
    ax.set_yticks([0, 100])
    ax.axhline(50, c=(171/255, 171/255, 171/255), alpha = 0.3)
    if count_stem == 0:
        ax.text(2006, 80, &amp;quot;Women&amp;quot;)
        ax.text(2006, 10, &amp;quot;Men&amp;quot;)
    if count_stem == 5:
        ax.text(2006, 90, &amp;quot;Women&amp;quot;)
        ax.text(2006, 25, &amp;quot;Men&amp;quot;)
        ax.tick_params(labelbottom=&#39;on&#39;)
    count_stem += 1


#Second Column. Liberal Arts.
for sp in range(1, 16, 3):
    ax = fig.add_subplot(6, 3, sp+1)
    ax.plot(women_degrees[&#39;Year&#39;], women_degrees[lib_arts_cats[count_lib_arts]], c=cb_dark_blue, label=&amp;quot;Women&amp;quot;, linewidth=3)
    ax.plot(women_degrees[&#39;Year&#39;], 100-women_degrees[lib_arts_cats[count_lib_arts]], c=cb_orange, label=&amp;quot;Men&amp;quot;, linewidth=3)
    ax.set_xlim(1970, 2010)
    ax.set_ylim(0, 100)
    ax.set_title(lib_arts_cats[count_lib_arts])
    ax.tick_params(bottom = &amp;quot;off&amp;quot;, left = &amp;quot;off&amp;quot;, top = &amp;quot;off&amp;quot;, right = &amp;quot;off&amp;quot;)
    ax.spines[&amp;quot;right&amp;quot;].set_visible(False)    
    ax.spines[&amp;quot;left&amp;quot;].set_visible(False)
    ax.spines[&amp;quot;top&amp;quot;].set_visible(False)    
    ax.spines[&amp;quot;bottom&amp;quot;].set_visible(False)
    ax.tick_params(labelbottom=&#39;off&#39;)
    ax.set_yticks([0, 100])
    ax.axhline(50, c=(171/255, 171/255, 171/255), alpha = 0.3)
    if count_lib_arts == 0:
        ax.text(2006, 80, &amp;quot;Women&amp;quot;)
        ax.text(2006, 10, &amp;quot;Men&amp;quot;)
    if count_lib_arts == 4:
        ax.text(2006, 90, &amp;quot;Women&amp;quot;)
        ax.text(2006, 25, &amp;quot;Men&amp;quot;)
        ax.tick_params(labelbottom=&#39;on&#39;)

    count_lib_arts += 1

#Third Column. Other cats.
for sp in range(2, 20, 3):
    ax = fig.add_subplot(6, 3, sp+1)
    ax.plot(women_degrees[&#39;Year&#39;], women_degrees[other_cats[count_other]], c=cb_dark_blue, label = &amp;quot;Women&amp;quot;, linewidth = 3)
    ax.plot(women_degrees[&#39;Year&#39;], 100-women_degrees[other_cats[count_other]], c=cb_orange, label = &amp;quot;Men&amp;quot;, linewidth = 3)    
    ax.set_xlim(1970, 2010)
    ax.set_ylim(0, 100)
    ax.set_title(other_cats[count_other])
    ax.tick_params(bottom = &amp;quot;off&amp;quot;, left = &amp;quot;off&amp;quot;, top = &amp;quot;off&amp;quot;, right = &amp;quot;off&amp;quot;)
    ax.spines[&amp;quot;right&amp;quot;].set_visible(False)    
    ax.spines[&amp;quot;left&amp;quot;].set_visible(False)
    ax.spines[&amp;quot;top&amp;quot;].set_visible(False)    
    ax.spines[&amp;quot;bottom&amp;quot;].set_visible(False)
    ax.tick_params(labelbottom=&#39;off&#39;)
    ax.set_yticks([0, 100])
    ax.axhline(50, c=(171/255, 171/255, 171/255), alpha = 0.3)
    if count_other == 0:
        ax.text(2006, 90, &amp;quot;Women&amp;quot;)
        ax.text(2006, 4, &amp;quot;Men&amp;quot;)
    if count_other == 5:
        ax.text(2006, 80, &amp;quot;Women&amp;quot;)
        ax.text(2006, 25, &amp;quot;Men&amp;quot;)
        ax.tick_params(labelbottom=&#39;on&#39;)


    count_other += 1

plt.savefig(&amp;quot;gender_degrees.png&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://coderhook-ml.firebaseapp.com/img/ds/gendergap/output_2_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;conclusions&#34;&gt;Conclusions:&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;We can certainly apreciate that while still some majors predominated by one of the genders, the tendency is to equally be studied by both as we can see with the progression os certain subjects like social sciences, business, and we can predict that in future the difference encountered in engineering will be less notable.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Winning at Jeopardy Game (part 1/2) </title>
      <link>https://coderhook-ml.firebaseapp.com/project/wining_jeopardy/</link>
      <pubDate>Thu, 27 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coderhook-ml.firebaseapp.com/project/wining_jeopardy/</guid>
      <description>

&lt;h1 id=&#34;winning-at-jeopardy-game-part-1-2&#34;&gt;Winning at Jeopardy Game (part &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt;)&lt;/h1&gt;

&lt;h4 id=&#34;jeopardy-es-un-concurso-de-televisión-estadounidense-creado-por-merv-griffin-es-un-concurso-de-conocimientos-con-preguntas-sobre-numerosos-temas-como-historia-idiomas-literatura-cultura-popular-bellas-artes-ciencia-geografía-y-deportes-consiste-en-que-uno-de-los-tres-concursantes-elige-uno-de-los-paneles-del-tablero-de-juego-el-cual-al-ser-descubierto-revela-una-pista-en-forma-de-respuesta-los-concursantes-entonces-tienen-que-dar-sus-respuestas-en-forma-de-una-pregunta&#34;&gt;Jeopardy! es un concurso de televisión estadounidense creado por Merv Griffin. Es un concurso de conocimientos con preguntas sobre numerosos temas como historia, idiomas, literatura, cultura popular, bellas artes, ciencia, geografía, y deportes. Consiste en que uno de los tres concursantes elige uno de los paneles del tablero de juego, el cual, al ser descubierto, revela una pista en forma de respuesta; los concursantes entonces tienen que dar sus respuestas en forma de una pregunta.&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;In this project we are going to first:

&lt;ul&gt;
&lt;li&gt;Normalize the text.&lt;/li&gt;
&lt;li&gt;Look for the answers in questions.&lt;/li&gt;
&lt;li&gt;Look for question that are repeated from time to time. (Trying to win easy :)&lt;/li&gt;
&lt;li&gt;Low Value &amp;amp; high Value Question. How to get more points.&lt;/li&gt;
&lt;li&gt;Applying the Chi-Squared Test.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import csv

jeopardy = pd.read_csv(&amp;quot;jeopardy.csv&amp;quot;)

print(jeopardy.head())
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;   Show Number    Air Date      Round                         Category  Value  \
0         4680  2004-12-31  Jeopardy!                          HISTORY   $200   
1         4680  2004-12-31  Jeopardy!  ESPN&#39;s TOP 10 ALL-TIME ATHLETES   $200   
2         4680  2004-12-31  Jeopardy!      EVERYBODY TALKS ABOUT IT...   $200   
3         4680  2004-12-31  Jeopardy!                 THE COMPANY LINE   $200   
4         4680  2004-12-31  Jeopardy!              EPITAPHS &amp;amp; TRIBUTES   $200   

                                            Question      Answer  
0  For the last 8 years of his life, Galileo was ...  Copernicus  
1  No. 2: 1912 Olympian; football star at Carlisl...  Jim Thorpe  
2  The city of Yuma in this state has a record av...     Arizona  
3  In 1963, live on &amp;quot;The Art Linkletter Show&amp;quot;, th...  McDonald&#39;s  
4  Signer of the Dec. of Indep., framer of the Co...  John Adams  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;jeopardy.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Show Number&lt;/th&gt;
      &lt;th&gt;Air Date&lt;/th&gt;
      &lt;th&gt;Round&lt;/th&gt;
      &lt;th&gt;Category&lt;/th&gt;
      &lt;th&gt;Value&lt;/th&gt;
      &lt;th&gt;Question&lt;/th&gt;
      &lt;th&gt;Answer&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;4680&lt;/td&gt;
      &lt;td&gt;2004-12-31&lt;/td&gt;
      &lt;td&gt;Jeopardy!&lt;/td&gt;
      &lt;td&gt;HISTORY&lt;/td&gt;
      &lt;td&gt;$200&lt;/td&gt;
      &lt;td&gt;For the last 8 years of his life, Galileo was ...&lt;/td&gt;
      &lt;td&gt;Copernicus&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;4680&lt;/td&gt;
      &lt;td&gt;2004-12-31&lt;/td&gt;
      &lt;td&gt;Jeopardy!&lt;/td&gt;
      &lt;td&gt;ESPN&#39;s TOP 10 ALL-TIME ATHLETES&lt;/td&gt;
      &lt;td&gt;$200&lt;/td&gt;
      &lt;td&gt;No. 2: 1912 Olympian; football star at Carlisl...&lt;/td&gt;
      &lt;td&gt;Jim Thorpe&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;4680&lt;/td&gt;
      &lt;td&gt;2004-12-31&lt;/td&gt;
      &lt;td&gt;Jeopardy!&lt;/td&gt;
      &lt;td&gt;EVERYBODY TALKS ABOUT IT...&lt;/td&gt;
      &lt;td&gt;$200&lt;/td&gt;
      &lt;td&gt;The city of Yuma in this state has a record av...&lt;/td&gt;
      &lt;td&gt;Arizona&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;4680&lt;/td&gt;
      &lt;td&gt;2004-12-31&lt;/td&gt;
      &lt;td&gt;Jeopardy!&lt;/td&gt;
      &lt;td&gt;THE COMPANY LINE&lt;/td&gt;
      &lt;td&gt;$200&lt;/td&gt;
      &lt;td&gt;In 1963, live on &#34;The Art Linkletter Show&#34;, th...&lt;/td&gt;
      &lt;td&gt;McDonald&#39;s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;4680&lt;/td&gt;
      &lt;td&gt;2004-12-31&lt;/td&gt;
      &lt;td&gt;Jeopardy!&lt;/td&gt;
      &lt;td&gt;EPITAPHS &amp;amp; TRIBUTES&lt;/td&gt;
      &lt;td&gt;$200&lt;/td&gt;
      &lt;td&gt;Signer of the Dec. of Indep., framer of the Co...&lt;/td&gt;
      &lt;td&gt;John Adams&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;jeopardy.columns
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Index([&#39;Show Number&#39;, &#39; Air Date&#39;, &#39; Round&#39;, &#39; Category&#39;, &#39; Value&#39;,
       &#39; Question&#39;, &#39; Answer&#39;],
      dtype=&#39;object&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;jeopardy.columns = [&#39;Show Number&#39;, &#39;Air Date&#39;, &#39;Round&#39;, &#39;Category&#39;, &#39;Value&#39;, &#39;Question&#39;, &#39;Answer&#39;]
jeopardy.columns
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Index([&#39;Show Number&#39;, &#39;Air Date&#39;, &#39;Round&#39;, &#39;Category&#39;, &#39;Value&#39;, &#39;Question&#39;,
       &#39;Answer&#39;],
      dtype=&#39;object&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;normalizing-text&#34;&gt;Normalizing Text&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

def normalize_text(text):
    text = text.lower()
    text = re.sub(&amp;quot;[^A-Za-z0-9\s]&amp;quot;, &amp;quot;&amp;quot;, text)
    return text

def normalize_values(text):
    text = re.sub(&amp;quot;[^A-Za-z0-9\s]&amp;quot;, &amp;quot;&amp;quot;, text)

    try:
        text = int(text)
    except Exception:
        text = 0
    return text

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;jeopardy[&amp;quot;clean_question&amp;quot;] = jeopardy[&amp;quot;Question&amp;quot;].apply(normalize_text)
jeopardy[&amp;quot;clean_answer&amp;quot;] = jeopardy[&amp;quot;Answer&amp;quot;].apply(normalize_text)
jeopardy[&amp;quot;clean_value&amp;quot;] = jeopardy[&amp;quot;Value&amp;quot;].apply(normalize_values)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;jeopardy.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Show Number&lt;/th&gt;
      &lt;th&gt;Air Date&lt;/th&gt;
      &lt;th&gt;Round&lt;/th&gt;
      &lt;th&gt;Category&lt;/th&gt;
      &lt;th&gt;Value&lt;/th&gt;
      &lt;th&gt;Question&lt;/th&gt;
      &lt;th&gt;Answer&lt;/th&gt;
      &lt;th&gt;clean_question&lt;/th&gt;
      &lt;th&gt;clean_answer&lt;/th&gt;
      &lt;th&gt;clean_value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;4680&lt;/td&gt;
      &lt;td&gt;2004-12-31&lt;/td&gt;
      &lt;td&gt;Jeopardy!&lt;/td&gt;
      &lt;td&gt;HISTORY&lt;/td&gt;
      &lt;td&gt;$200&lt;/td&gt;
      &lt;td&gt;For the last 8 years of his life, Galileo was ...&lt;/td&gt;
      &lt;td&gt;Copernicus&lt;/td&gt;
      &lt;td&gt;for the last 8 years of his life galileo was u...&lt;/td&gt;
      &lt;td&gt;copernicus&lt;/td&gt;
      &lt;td&gt;200&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;4680&lt;/td&gt;
      &lt;td&gt;2004-12-31&lt;/td&gt;
      &lt;td&gt;Jeopardy!&lt;/td&gt;
      &lt;td&gt;ESPN&#39;s TOP 10 ALL-TIME ATHLETES&lt;/td&gt;
      &lt;td&gt;$200&lt;/td&gt;
      &lt;td&gt;No. 2: 1912 Olympian; football star at Carlisl...&lt;/td&gt;
      &lt;td&gt;Jim Thorpe&lt;/td&gt;
      &lt;td&gt;no 2 1912 olympian football star at carlisle i...&lt;/td&gt;
      &lt;td&gt;jim thorpe&lt;/td&gt;
      &lt;td&gt;200&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;4680&lt;/td&gt;
      &lt;td&gt;2004-12-31&lt;/td&gt;
      &lt;td&gt;Jeopardy!&lt;/td&gt;
      &lt;td&gt;EVERYBODY TALKS ABOUT IT...&lt;/td&gt;
      &lt;td&gt;$200&lt;/td&gt;
      &lt;td&gt;The city of Yuma in this state has a record av...&lt;/td&gt;
      &lt;td&gt;Arizona&lt;/td&gt;
      &lt;td&gt;the city of yuma in this state has a record av...&lt;/td&gt;
      &lt;td&gt;arizona&lt;/td&gt;
      &lt;td&gt;200&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;4680&lt;/td&gt;
      &lt;td&gt;2004-12-31&lt;/td&gt;
      &lt;td&gt;Jeopardy!&lt;/td&gt;
      &lt;td&gt;THE COMPANY LINE&lt;/td&gt;
      &lt;td&gt;$200&lt;/td&gt;
      &lt;td&gt;In 1963, live on &#34;The Art Linkletter Show&#34;, th...&lt;/td&gt;
      &lt;td&gt;McDonald&#39;s&lt;/td&gt;
      &lt;td&gt;in 1963 live on the art linkletter show this c...&lt;/td&gt;
      &lt;td&gt;mcdonalds&lt;/td&gt;
      &lt;td&gt;200&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;4680&lt;/td&gt;
      &lt;td&gt;2004-12-31&lt;/td&gt;
      &lt;td&gt;Jeopardy!&lt;/td&gt;
      &lt;td&gt;EPITAPHS &amp;amp; TRIBUTES&lt;/td&gt;
      &lt;td&gt;$200&lt;/td&gt;
      &lt;td&gt;Signer of the Dec. of Indep., framer of the Co...&lt;/td&gt;
      &lt;td&gt;John Adams&lt;/td&gt;
      &lt;td&gt;signer of the dec of indep framer of the const...&lt;/td&gt;
      &lt;td&gt;john adams&lt;/td&gt;
      &lt;td&gt;200&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;jeopardy[&amp;quot;Air Date&amp;quot;] = pd.to_datetime(jeopardy[&amp;quot;Air Date&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;jeopardy.dtypes
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Show Number                int64
Air Date          datetime64[ns]
Round                     object
Category                  object
Value                     object
Question                  object
Answer                    object
clean_question            object
clean_answer              object
clean_value                int64
dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;looking-for-answers-in-questions&#34;&gt;Looking for Answers in Questions&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def answ_in_quest(row):
    split_answer = row[&amp;quot;clean_answer&amp;quot;].split(&amp;quot; &amp;quot;)
    split_question = row[&amp;quot;clean_question&amp;quot;].split(&amp;quot; &amp;quot;)

    match_count = 0

    if &amp;quot;the&amp;quot; in split_answer:
        split_answer.remove(&#39;the&#39;)
    if len(split_answer) == 0:
        return 0

    for item in split_answer:
        if item in split_question:
            match_count += 1

    return match_count / len(split_answer)

jeopardy[&#39;answer_in_question&#39;] = jeopardy.apply(answ_in_quest, axis=1)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;jeopardy[&amp;quot;answer_in_question&amp;quot;].mean()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0.060493257069335872
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-percentage-of-finding-the-answer-in-the-question-is-around-6-as-it-is-a-small-quantity-in-order-to-win-at-this-game-we-cannot-expect-to-get-a-los-of-answers-just-looking-at-the-question&#34;&gt;The percentage of finding the answer in the question is around 6%, as it is a small quantity in order to win at this game we cannot expect to get a los of answers just looking at the question.&lt;/h3&gt;

&lt;h1 id=&#34;looking-for-questions-that-are-repeated-from-time-to-time&#34;&gt;Looking for Questions that are repeated from time to time&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;question_overlap = []
terms_used = set()

for i, row in jeopardy.iterrows():
    split_question = row[&amp;quot;clean_question&amp;quot;].split(&amp;quot; &amp;quot;)

    split_question = [q for q in split_question if len(q) &amp;gt; 5]
    match_count = 0

    for word in split_question:
        if word in terms_used:
            match_count += 1
        terms_used.add(word)

    if len(split_question) &amp;gt; 0:
        match_count = match_count/len(split_question)

    question_overlap.append(match_count)

jeopardy[&amp;quot;question_overlap&amp;quot;] = question_overlap

jeopardy[&amp;quot;question_overlap&amp;quot;].mean()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0.69259600573386471
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;here-we-have-a-mean-of-70-which-means-that-it-can-be-relevant-to-look-at-past-question-because-is-probably-that-it-would-be-repeated-in-other-games-but-here-we-hav-to-be-careful-because-we-look-at-it-by-word-per-word-which-cna-be-tricky-but-definetly-the-70-is-significant-and-we-should-keep-working-in-this-part-of-the-game&#34;&gt;Here we have a mean of 70% which means that it can be relevant to look at past question because is probably that it would be repeated in other games, but here we hav to be careful because we look at it by word per word which cna be tricky, but definetly, the 70% is significant and we should keep working in this part of the game.&lt;/h4&gt;

&lt;h1 id=&#34;low-value-vs-high-value-questions&#34;&gt;Low Value Vs High Value Questions&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def assign_values(row):
    if row[&#39;clean_value&#39;] &amp;gt; 800:
        value = 1
    else:
        value = 0
    return value
jeopardy[&#39;high_value&#39;] = jeopardy.apply(assign_values, axis = 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def takes_a_word(word):
    low_count = 0
    high_count = 0

    for i, row in jeopardy.iterrows():
        split_question = row[&amp;quot;clean_question&amp;quot;].split(&amp;quot; &amp;quot;)

        if word in split_question:
            if row[&#39;high_value&#39;] == 1:
                high_count += 1
            else:
                low_count += 1
    return high_count, low_count

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;observed_expected = []

comparison_terms = list(terms_used)[:5]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(comparison_terms)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;glamourous&#39;, &#39;handsomest&#39;, &#39;sutherland&#39;, &#39;laptopa&#39;, &#39;absorbed&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for term in comparison_terms:
    observed_expected.append(takes_a_word(term))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;observed_expected
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[(1, 0), (1, 1), (0, 1), (0, 1), (2, 0)]
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;applying-the-chi-squared-test&#34;&gt;Applying The Chi-Squared Test&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;high_value_count = jeopardy[jeopardy[&amp;quot;high_value&amp;quot;] == 1].shape[0]
print(high_value_count)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;5734
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;low_value_count = jeopardy[jeopardy[&amp;quot;high_value&amp;quot;] == 0].shape[0]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;chi_squared = []

from scipy.stats import chisquare
import numpy as np
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for obs in observed_expected:
    total = sum(obs)
    total_prop = total / len(jeopardy)
    exp_high_value = total_prop * high_value_count
    exp_low_value = total_prop * low_value_count

    chi_squared.append(chisquare(np.array([obs[0], obs[1]]), np.array([exp_high_value, exp_low_value])))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;chi_squared
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[Power_divergenceResult(statistic=2.4877921171956752, pvalue=0.11473257634454047),
 Power_divergenceResult(statistic=0.44487748166127949, pvalue=0.50477764875459963),
 Power_divergenceResult(statistic=0.40196284612688399, pvalue=0.52607729857054686),
 Power_divergenceResult(statistic=0.40196284612688399, pvalue=0.52607729857054686),
 Power_divergenceResult(statistic=4.9755842343913503, pvalue=0.025707519787911092),
 Power_divergenceResult(statistic=2.4877921171956752, pvalue=0.11473257634454047),
 Power_divergenceResult(statistic=0.44487748166127949, pvalue=0.50477764875459963),
 Power_divergenceResult(statistic=0.40196284612688399, pvalue=0.52607729857054686),
 Power_divergenceResult(statistic=0.40196284612688399, pvalue=0.52607729857054686),
 Power_divergenceResult(statistic=4.9755842343913503, pvalue=0.025707519787911092)]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;we-will-continue-in-part-2-trying-different-model-to-get-some-more-insights-and-se-if-they-can-work-better-than-chi-squared&#34;&gt;We will continue in part 2 trying different model to get some more insights and se if they can work better than chi-Squared.&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
